<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Semi and Weakly Supervised Semantic Segmentation Using Generative Adversarial Network阅读笔记]]></title>
    <url>%2F2019%2F10%2F05%2FSemi%20and%20Weakly%20Supervised%20Semantic%20Segmentation%20Using%20Generative%20Adversarial%20Network%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[ICCV 2017 CONTRIBUTIONS1.提出了一个GAN网络框架——将传统GAN扩展为像素级预测。 2.使用半监督方式利用生成的数据和无标注数据来训练网络。 3.通过采用条件GAN和带有图像级别类标签的数据将方法扩展到弱监督学习上。 DETAILS1.提出了一个半监督框架，包括一个生成网络和判别网络，其中生成网络用于为判别网络提供另外的训练样本，判别网络类似于一个多类分类器，将生成网络生成的样本和真实样本进行分类，如果为生成样本则被分为假类（fake class），若为真实样本，则将其每个像素分为对应的类。（判别器输出k张图像，每张图像对应于一个类别的置信度。例如k=3，第一张图像的第一个像素点处的概率为0.3，即第一个像素属于第0类的概率为0.3，第二张图像的第一个像素点处的概率为0.2，第三章图像的第一个像素点处的概率为0.5，则输入图像第一个像素点属于第2类）。然后最后得到所有像素点属于的类别，即得到一张mask预测图。 2.使用GAN的基本思想是：加入大量伪造的数据数据迫使真实样本在特征空间中逼近（？？？不太懂，是说找到真实样本之间的相同特征吗），从而实现自下向上的聚类过程，改善多类像素的分类。 3.半监督的思想是从无标注数据中识别某个特定的隐藏结构p(x)，该结构可以促进带有y类标签的图像的分类。本文的目的是找到一个隐藏数据结构帮助语义分割。 4.弱标签包括bounding box和image-level labels。 5.作者发现GAN的使用既能学到隐藏的数据结构，又可以学习到空间物体分布（马路在图像最下面，天空在图像最上面等）。 6.实验结果发现相比半监督，弱监督的结果中false positives变少了，这是因为，而半监督中的false positives很多都是背景置信度太高导致的，而判别器提高了弱标注图像中出现的标签的置信度（加的图像类标签提高了该类对象的置信度）。 ARCHITECTURE1.生成器（具体的结构略） 2.判别器：像素分类，同时判别所给图像是来自训练数据（ground truth，包括未标注数据）还是生成数据。 LOSS半监督（使用像素级标签）判别器Loss P(y=fake|x)是指输入图像为生成图像的概率。 L_D的第一项：为无标注数据设计，目的是降低像素属于假类的概率（？？？没看懂）。 L_D的第二项：判别器对由标签数据的判别，将其每个像素进行分类，得到mask图后与标签y进行交叉熵。 L_D的第三项：提高判别器对真实样本和生成样本的判别能力。 生成器Loss 同传统GAN。 弱监督（使用图像级标签）判别器Loss（没怎么看懂 ） L_D的第一项：为带弱标注的图像设计 L_D的第二项：为生成的图像（带弱标注）设计 L_D的第三项：为带标注的图像设计， 判别器抑制生成图像属于true类的概率，而提高了弱标注图像中出现的标签的置信度。 生成器Loss同半监督。 SOME QUESTIONS1.做半监督训练时，有标注的图像中没有出现过对象o，但是未标注的图像中出现过。那么在做测试的时候，这个对象o是否会被分割出来？ 2.究竟是怎么识别出那个隐藏数据结构的？生成图像和无标签图像究竟是怎么用的？两者有什么区别？]]></content>
      <categories>
        <category>Theis</category>
      </categories>
      <tags>
        <tag>Semi-Supervised</tag>
        <tag>Weakly-Supervised</tag>
        <tag>Adversarial Learning</tag>
        <tag>Semantic Segmentation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[每周诗歌01]]></title>
    <url>%2F2019%2F10%2F04%2F%E6%AF%8F%E5%91%A8%E8%AF%97%E6%AD%8C01%2F</url>
    <content type="text"><![CDATA[亲爱的小鱼亲爱的小鱼，我好爱你， 我要喂你面包，你要快快长大， 每一天我都会亲亲你，我答应你，永远都不会忘记。 亲爱的小鱼，你越长越长， 总有一天，再也住不下小鱼缸。 我会带你到海边，让你自由。 尽管你是那么开心的离开。 亲爱的小鱼，我会想你的。 我会在白天一直等你，看你会不会游回来。 我也会在夜里继续等待，希望早点看见你回来。 看到你回来，我会是多么地开心。 我知道你也爱我，我让你自由，你却回来了。]]></content>
      <categories>
        <category>Poem</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Adversarial Learning for Semi-Supervised Semantic Segmentation阅读笔记]]></title>
    <url>%2F2019%2F10%2F03%2FAdversarial%20Learning%20for%20Semi-Supervised%20Semantic%20Segmentation%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[BMVC 2018 CONTRIBUTIONS1.提出了一个对抗框架，提高了分割精度却未增加推断时的计算量。 2.提出一个半监督框架，证明了可以使用未标注数据提高分割精度。 3.通过利用判别器发现未标注图像的可靠区域（判别器的输出），从而促进半监督学习。 Details1.通过将Ladv和Lce结合来提高分割精度。 2.全卷积判别器可通过在无标注数据的分割图像上发现可靠区域，将其当做ground truth辅助分割，从而提高其他的监督信号。 3.使用了两个半监督loss项（Lsem和Ladv）来利用无标注：先用置信图作为监督信号，以自学方式指导Lce(置信图表明了预测分布图中趋于ground truth的分布，即所谓的可靠区域)；使用无标注数据上的Ladv（同有监督中的Ladv），使得无监督数据的分割结果向ground truth靠近。 4.仅用标注数据训练判别网络。 Architecture分割网络采用了带有预训练好的ResNet-101的DeepLab-v2框架。 输入：图像 (H, W, C) 输出：class probability map (H, W, C) 判别网络-输入：class probability map （来自分割网络/one-hot编码后的ground truth） -输出：confidence map (H, W, 1) Training Processing使用标注数据时，分割网络由Lce和Ladv同时监督，判别网络仅使用标注数据训练。 使用无标注数据时，用半监督方式训练分割网络。在获得分割预测后，将其作为判别网络的输入，输出一个置信图，将该置信图作为监督信号，使用自学机制来训练带有masked交叉熵（Lsemi）的分割网络。 Loss Function判别器的Loss 分割器的Loss Lsemi中的I(·)为指示函数，用于将D(S(X_n))结果二值化，当D(S(X_n)) &gt; T_semi时，函数取1，否则取0。 Some Questions1.spatial probability map和confidence map一样吗，前者好像是0/1组成的，后者好像是概率值，然后经过二值化变成了0/1？]]></content>
      <categories>
        <category>Thesis</category>
      </categories>
      <tags>
        <tag>Semi-Supervised</tag>
        <tag>Adversarial Learning</tag>
        <tag>Semantic Segmentation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac电脑下如何给终端设置代理]]></title>
    <url>%2F2019%2F10%2F02%2Fmac%E7%94%B5%E8%84%91%E4%B8%8B%E5%A6%82%E4%BD%95%E7%BB%99%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[Shadowsocks的运行原理在服务器端部署完成后，用户根据指定的密码、加密方式、端口等与服务器连接。成功连接之后，客户端会在用户电脑上构建一个本地的Socks5代理。浏览网络时，网络流量会被分到本地Socks5代理，客户端将其加密后发送到服务器，服务器以同样的加密方式将流量回传给客户端，从而实现代理上网。 Shadowsocks默认在1080端口开启Socks5代理，同时兼容了HTTP代理。 一些浏览器和软件只支持HTTP代理，而不支持Socks代理，正式因为Shadowsocks同时支持了HTTP代理才能对这些软件进行代理。 浏览器一般自动启动系统代理，而其他软件则需要自身支持HTTP代理或Socks5代理，并且一般需要手动配置。 全局模式和PAC模式的区别简单来说在全局模式下，所有网站默认走代理，而PAC模式只有被墙的网站才会走代理。 mac下如何给终端设置代理查看代理运行的端口，一般在1086端口 在~/.zshrc中添加： 12alias proxy=&quot;export ALL_PROXY=socks5://127.0.0.1:1086&quot;alias unproxy=&quot;unset ALL_PROXY&quot; 然后source ~/.zshrc 用以下命令查看当前的ip所在地 1curl https://ip.cn 再执行以下命令： 1proxy ip切换到美国 再执行： 1unproxy 地址又回来了。 其他一些常用的查询公网出口IP的命令curl ipinfo.io curl https://ip.cn curl cip.cc curl myip.ipip.net 等等 参考1.Shadowsocks代理方式 2.Shadowsocks（Sock5代理）的PAC模式与全局模式与VPN的区别 3.OS X 设置终端使用Socks5 4.[命令行] curl查询公网出口IP]]></content>
      <categories>
        <category>Solutions</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo在部署时候卡住的原因及解决方案]]></title>
    <url>%2F2019%2F10%2F02%2Fhexo%E5%9C%A8%E9%83%A8%E7%BD%B2%E6%97%B6%E5%80%99%E5%8D%A1%E4%BD%8F%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[问题描述今天用hexo d命令进行部署的时候发现卡了很久一直不能进行。后来发现是因为用了另一个代理的原因。这个代理在1080端口支持的是http代理，而我在_conf.yml设置中用的是ssh地址。 解决方法打开_conf.yml，将 1234deploy: type: git repository:git@github.com:chida15/chida15.github.io.git branch: master 修改成 1234deploy: type: git repository: https://github.com/Chida15/chida15.github.io.git branch: master 一些思考1.http代理和socks代理的区别？ http代理是基于http协议的代理，一般用于网页，端口通常为80、3128、8080。而socks代理是基于socks协议的一种代理，也叫做全能代理，支持多种协议，包括http、ftp以及其他类型的请求，端口通常为1080. 2.为什么shadowsocks使用的是http代理，而不是socks代理呢？ shawdowsocks默认在1080端口开启socks代理，且兼容了http代理，因为一些软件和浏览器不支持socks代理，但支持http代理，所以后者用的比较多。 具体的可以参考我的另一个博客：mac电脑下如何设置代理 参考1.hexo deploy 命令卡住的奇怪问题 2.HTTP代理和Socks代理有什么区别]]></content>
      <categories>
        <category>Solutions</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac下安装dosbox]]></title>
    <url>%2F2019%2F10%2F02%2Fmac%E4%B8%8B%E5%AE%89%E8%A3%85dosbox%2F</url>
    <content type="text"><![CDATA[如何安装dosboxdosbox下载汇编开发工具下载创建一个工作目录1mkdir Assembly // 我是在~/MyAcademic/文件夹下创建的 将下载的汇编开发工具移动到该文件夹中 打开dosbox，输入：12mount c ~/myFiles/MyAcademic/Assemblyc: 即可进入创建的文件夹中输入debug，运行debug程序 输入q退出debug dosbox的一些设置mac下dosbox的设置文件在~/Library/Preferences/DOSBox 0.74-3 Preferences （1）自动挂载在设置文件中加入1mount c ~/myFiles/MyAcademic/Assembly // 后面是前面创建的放编译、链接工具的文件夹 （2）改变分辨率在设置文件中加入123456789101112131415161718[sdl]fullscreen=falsefulldouble=falsefullresolution=originalwindowresolution=1024x640 // 可以通过更改这里的分辨率调整大小output=openglautolock=truesensitivity=100waitοnerrοr=truepriority=higher,normalmapperfile=mapper-0.74.mapusescancodes=true[render]frameskip=0aspect=falsescaler=normal2x 注意：将自动挂载设置卸载改变分辨率设置前面，否则会出错。 参考1.https://www.jianshu.com/p/d762644e076b 2.https://blog.csdn.net/My__Code/article/details/79734754 3.https://blog.csdn.net/lvdan1/article/details/72675340]]></content>
      <categories>
        <category>Solutions</category>
      </categories>
      <tags>
        <tag>Assembly Language</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自顶向下方法第一章笔记]]></title>
    <url>%2F2019%2F09%2F30%2F%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[何为因特网具体构成通信链路由不同的物理媒体组成，如铜线（copper wire）、光纤（optical fiber）、同轴电缆（coaxial cable）和无线电频谱（radio spectrum）等。 分组交换机最重要的两个分组交换机是路由器和链路层交换机，前者常用于网络核心中，后者常用于接入网中。 ISP（Internet Service Provider）由多个分组交换机和链路组成的网络 路由器和交换机的区别： 前者是网络层的分组交换机，后者是链路层的分组交换机；前者使用网络层IP地址转发分组，后者使用MAC地址转发分组；前者常用于网络核心部分，后者常用于接入网。 服务角度（因特网的基础设施）socket interfaceTCP/IP网络的应用程序编程接口（Application Programming Interface，API），它定义了很多函数或者例程，程序员可以用他们来开发TCP/IP网络上的应用程序。 什么是协议协议定义了通信实体（两个或多个）之间交换消息的格式和顺序。 协议既可以是硬件也可以是软件。 协议存在于计算机、路由器、平板或其他可联网设备上。 网络边缘接入网 物理媒体 网络核心分组交换为了向目标端系统发送信息，源端系统将长报文分成多个分组，每个分组通过通信链路和多个分组交换机最终到达目标端系统。 存储转发（store-and-forward transmission）存储转发是指分组转换器在将分组的第一个比特转发之前，必须接收全部的分组。 排队延时和分组丢失（Queuing Delays and Packet Loss）每个分组交换器都有一个输出缓存（输出队列）。当到达的分组需要传输到某个链路，而该链路正在传输其他分组（不同分组不能使用同一链路，同一分组的不同bit可以使用同一链路）时，该到达分组必须在输出缓存中等待。若缓存已满，则需要丢弃到达分组或排队分组。 转发表和路由选择协议（Forwarding Tables and Routing Protocols）每个路由器中有一个转发表，其中将目标地址映射成路由器输出链路。每个分组的头部中包含了目标端系统的IP地址，当分组到达一个路由器时，该路由器检查分组的目标地址的一部分，然后搜索其转发表找到合适的输出链路。 路由选择协议用于自动设置转发表，它可以决定从一个路由器到目标地址的最短路径，并使用这些最短路径来配置路由器中的转发表。 电路交换传统的电话网络是一种电路交换网络。 电路交换在通信期间链路一直保留，且预留了带宽，因此链路的传输速率始终不变。 在下图的电路交换网络中，4条链路将4个电路交换机相互连接。每天链路包含四条电路，因此每条链路可同时支持4条并行连接。当两台主机要进行通信时，网络在两台主机之间建立了一条专用的端到端连接。 因为每条链路有4条电路，该连接在连接期间获得链路宽带的1/4，比如每条链路具有1Mbps传输速率，则每个端到端电路交换连接获得250kbps专用的传输速率。 电路交换中的复用技术频分复用频域被划分成n份，每个电路的带宽为1/nkHZ 时分复用时间划分为帧（frame），帧划分为时隙（time slot） 注意： 频分复用和时分复用都分割了带宽，但是频分复用是连续得到部分带宽，时分复用是周期性得到所有带宽。 扩展： 分组交换网络中的多路复用技术是“统计多路复用”/“异步时分多路复用，它与时分复用类似，但它的时间片是根据用户实际需要动态分配的。” 分组交换中的时延、丢包和吞吐量分组交换网络中的时延概述时延的类型时延包括结点处理时延、排队时延、传输时延（transmission delay）和传播时延（propagation delay） 注意： 传输时延是分组所有比特从离开路由器所用的时间；而传播时延是分组的某个比特在链路上所用的时间。当传输时延 &gt; 传播时延时，第一个分组比特已经到达下一结点，而最后一个分组比特还未离开当前结点。 结点处理时延包括处理分组首部和决定其去向，还包括处理分组中比特级差错。 排队时延和丢包流量强度=L*a / R L：每个分组包含比特数 a：分组到达队列的平均速率 R：传输速率 L * a：比特到达队列的平均速率 流量强度用于评估排队时延的程度，如果流量程度大于1，则比特到达队列的平均速度超出了比特的传输速率，因此队列会增长，排队时延会增加。 考虑流量强度小于1的情况，此时到达流量的性质将会影响排队时延。如果分组是周期性到达，即每L/Rs到达一个分组，则每个分组到达时队列均为空，没有排队时延；但如果分组是突发式到达，如一次性到达N个分组，则第一个分组的排队时延为0，第二个分组的排队时延为L/Rs,第N个分组排队时延为(N-1)/R。 丢失分组的份额随着流量强度的增加而增加。 因此一个结点的性能不仅根据时延度量，还根据丢包率来度量。 端到端时延假设源主机和目的主机之间有N-1个路由器（假设排队时延忽略不计），则端到端时延如下 dend-end = N(dproc + dtrans + dprop) 吞吐量瞬时吞吐量：主机接收文件的实时速率bps 平均吞吐量：总文件大小/总接收时间 吞吐量 = 瓶颈链路的传输速率 = min{R1, R2, …,Rn} 其中R1…Rn为源主机/目的主机/路由器与路由器之间的传输速率。 吞吐量不仅取决于传输速率，还取决于干扰流量。 假设网络核心中的链路传输速率为R=5Mbps，服务器接入网速率为Rs=2Mbps，客户机接入网速率为Rc=1Mbps。 当只有一个网络中客户机-服务器对时， 吞吐量=min{R, Rs, Rc} = 1Mbps （瓶颈链路为客户机接入网） 当有10个网络客户机-服务器对时， 每条链路的传输速率=5Mbps / 10 = 500kbps 吞吐量=min{R, Rs, Rc} = 500kbps 当没有其他干扰流量时，吞吐量可以简单定义为min{Rs, Rc}（一般情况下R远大于Rs和Rc） 传输速率、带宽和吞吐量辨析 带宽是最大传输速率，吞吐量是实际传输速率。 日常生活中ISP中说的带宽其实是以bit计，而我们下载时候显示的下载速率是以字节计 协议层次及其服务模型层次结构改变服务的实现与改变服务本身不同，改变服务本身并不会影响其上层服务，而改变服务的实现则改变了服务的调用接口，就必须改变上层服务对本层服务的调用方式。 协议分层协议层次可以用软件、硬件或二者结合实现。诸如HTTP和SMTP的应用层协议在端系统中采用软件实现，运输层协议也是如此。物理层和数据链路层协议负责处理特定链路上的通信，通常是在与给定链路相联系的网络接口卡中实现。而网络层经常是硬件和软件实现的混合体。 n层协议的不同部分常常分布于端系统、分组交换机和其他组件中。 因特网的协议栈为五层：物理层、链路层、网络层、运输层和应用层。 应用层应用层是网络应用和其协议所处的层。 功能：与另一台主机上的应用交换分组信息，实现主机应用之间的通信。 协议：常见的因特网应用层包括很多协议，比如HTTP协议、SMTP协议、FTP协议和DNS。 应用层的分组称为报文（message） 运输层功能：运输层在应用程序端点之间传送应用层的报文。 协议：TCP和UDP。 TCP为其应用提供面向连接服务。这种服务包括了应用层报文发往目的主机的可靠传输和流量控制。同时TCP还将长报文划分成短报文，并提供拥塞控制机制（当网络拥塞时，源主机控制其传输速率） UDP提供向其应用提供无连接服务。它不提供可靠性，没有流量控制，也没有拥塞控制。 运输层的分组称为报文段（segment） 网络层功能：将数据报从一台主机移动到另一台主机。 协议：IP协议（定义了数据报中的各个字段以及端系统和路由器如何作用于这些字段）、路由交换协议。 所有具有网络层的因特网组件都必须运行IP协议。 网络层的分组称为数据报（datagram） 链路层功能：将分组从一个结点（主机或路由器）移动到路径的下一个结点。 协议：链路层的提供的服务取决于应用于该链路的特定的链路层协议。以太网、WiFi和电缆接入网的DOCSIS协议。由于分组在传送过程中可能经过多种链路，所以数据报可能被烟台不同链路上的不同链路层协议处理。因此网络层将受到来自每个不同链路层协议的不同服务。 链路层的分组称为帧（frame） 物理层功能：将帧中的一个比特从一个结点移动到下一个结点。 协议：物理层的协议也是链路相关的，尤其是链路的实际传输媒体。例如。以太网有很多物理层协议：一个是关于双绞铜线的，一个是关于同轴电缆的，一个是关于光纤的。 OSI模型OSI参考模型有七层：应用层，表示层，会话层，传输层，网络层，数据链路层和物理层。 其中表示层的功能是能使通信应用解释交换数据含义。包括数据压缩和数据加密以及数据描述。会话层提供了数据交换定界和同步功能。 分层的优缺点分层的优点每层提供的服务易于改变，只需要它为上层提供相同服务，使用来自下层的相同服务。 分层的缺点1.一层可能冗余较低层的功能。比如许多协议栈在基于每段链路和基于端到端两种情况都提供了提供了差错恢复功能。 2.某层的功能可能需要其他层才出现的信息，这违反了层次分离的目的。 封装 端系统实现了全部的协议层，分组交换及（链路交换机和路由器）没有实现协议栈里的全部协议层，通常只实现底部协议层。这一点与因特网体系结构将它的复杂性放在网络边缘的观点是一样的。 封装的过程：在发送主机端，一个应用层报文被传送给传输层。在最简单的情况下，运输层收取报文并附上附加信息（运输层首部信息），该首部将被接收端的运输层使用。应用层报文和运输层首部信息组成了运输层报文段。然后运输层将报文段送入网络层，在网络层中加入了如源和目的主机的地址等网络层首部信息，产生了网络层数据报。数据包被传递给链路层，链路层增加它自己的首部信息并创建链路层帧。因此，在每一层，分组都有两种字段：首部字段和有效载荷字段（payload field，来自上一层的分组）。]]></content>
      <categories>
        <category>Subjects</category>
      </categories>
      <tags>
        <tag>Computer Networking</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何给hexo博文加密]]></title>
    <url>%2F2019%2F09%2F30%2F%E5%A6%82%E4%BD%95%E7%BB%99hexo%E5%8D%9A%E6%96%87%E5%8A%A0%E5%AF%86%2F</url>
    <content type="text"><![CDATA[安装hexo插件1npm install hexo-blog-encrypt --save 对博客主目录下的_config.yml文件进行如下修改12encrypt: enable: true 在需要加密的博客的文件头中加入如下字段：123title: 如何给hexo博文加密date: 2019-09-30 10:40:54password: 密码]]></content>
      <categories>
        <category>Solutions</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在hexo中添加图片（typora）]]></title>
    <url>%2F2019%2F09%2F29%2F%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%EF%BC%88typora%EF%BC%89%2F</url>
    <content type="text"><![CDATA[相关设置在Mac下进入Typora的Preferences中 点击image选择自定义设置，即可将粘贴在typora的图片自动存放到hexo博文对应的文件夹中 设置图片保存的相对地址为：../../../../source（相对source文件夹的相对地址）修改图片的根目录进入博客目录下的scaffolds文件夹中，修改post.md如下：12345678---title: 如何在hexo中添加图片（typora）permalink: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags: categories: typora-root-url: ../../../../source # 加入这一行--- 在博文中插入截图的图片： 在博文中插入本机图片（无论该文件在哪里，都会自动加入source/images/对应博文名称的文件夹下）：]]></content>
      <categories>
        <category>Solutions</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac终端iTerm2如何进行单词跳跃]]></title>
    <url>%2F2019%2F09%2F29%2Fmac%E7%BB%88%E7%AB%AFiTerm2%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%8D%95%E8%AF%8D%E8%B7%B3%E8%B7%83%2F</url>
    <content type="text"><![CDATA[快捷键修改进入Preferences设置中 进入Profiles下的keys标签页 找到option+←和option+→两个快捷键（这里是已经修改后的） 进行如下修改 iTerm2下的一些快捷键光标移动至行首： ctrl + a光标移动至行位：ctrl + e删除当前行：ctrl + u当前位置开始清除至行尾：ctrl + k]]></content>
      <categories>
        <category>Solutions</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何对hexo中的文章进行分类管理]]></title>
    <url>%2F2019%2F09%2F29%2F%E5%A6%82%E4%BD%95%E5%AF%B9hexo%E4%B8%AD%E7%9A%84%E6%96%87%E7%AB%A0%E8%BF%9B%E8%A1%8C%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[在博客主目录下找到_config.yml文件，修改其中的new_post_name和permalink字段将new_post_name修改成如下格式：1new_post_name: :year/:month/:day/:title.md 如果觉得没必要精确到日的话，可以删除”:day/“ 将permalink修改成如下格式：1permalink: :year/:month/:day/:title/ 问题permalink中的title不是文章的题目，而是相对于source/_post/的相对路径因此需要在博客主目录下的scaffolds文件夹中修改post.md：1234567---title: &#123;&#123; title &#125;&#125;permalink: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:categories:--- 参考https://blog.csdn.net/maosidiaoxian/article/details/85220394]]></content>
      <categories>
        <category>Solutions</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何给hexo博客添加标签]]></title>
    <url>%2F2019%2F09%2F29%2F%E5%A6%82%E4%BD%95%E7%BB%99hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E6%A0%87%E7%AD%BE%2F</url>
    <content type="text"><![CDATA[在source文件夹中执行：1hexo new page tags 这里的tags是标签页面的名字，也可以写中文的“标签”。 在新生成的tags文件夹中打开index.md，添加如下字段：1type: &quot;tags&quot; 注意：冒号后有一个空格 如果需要删除tags页的评论，添加如下字段：1comments: false 进入博客主目录下的themes文件夹，再进入所使用的的主题文件夹下，打开_config.yml文件，找到menu字段，添加tags字段：1234menu:home: /archives: /archives/tags: /tags/]]></content>
      <categories>
        <category>Solutions</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何将hexo博客从Ubuntu下迁移至Mac]]></title>
    <url>%2F2019%2F09%2F28%2F%E5%A6%82%E4%BD%95%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E4%BB%8EUbuntu%E4%B8%8B%E8%BF%81%E7%A7%BB%E8%87%B3Mac%2F</url>
    <content type="text"><![CDATA[迁移过程在Mac下安装git并添加公钥具体内容可以百度搜索，不过多赘述。下载Node.js此处下载拷贝原来的文件到新电脑中必须拷贝的文件有：_config.yml，theme/，source/，scaffolds/，package.json，.gitignore不需要拷贝的文件有：.git/，node_modules/，public/，.deploy_git/，db.json安装hexo在安装过程中，由于npm的镜像在国外，所以遇到了一些错误，后来改用淘宝的cnpm才得以解决，以下是方法：1npm install -g cnpm --registry=https://registry.npm.taobao.org 使用cnpm install命令进行模块安装注意不要使用hexo init安装deployer1install hexo-generator-git --save 遇到的问题插件重复安装在node_modules文件夹河package,json文件夹中删除相应的插件hexo clean使用出错把public中需要编译的内容（比如CNAME文件）移到source文件夹中，然后进行hexo clean。当执行hexo g的时候会重新创建pulic文件夹，复原其中的文件。无法部署新的文章到github上因为我使用了原来文件中的node_modules，可以删除它再cnmp install参考链接1.https://www.zhihu.com/question/21193762/answer/103097754]]></content>
      <categories>
        <category>Solutions</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何从零搭建unet网络]]></title>
    <url>%2F2019%2F07%2F09%2F%E5%A6%82%E4%BD%95%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAunet%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[数据增强123456789101112'''数据增强'''import randomfrom PIL import Imagefrom torchvision import transformsimport torchvision.transforms.functional as tfimport osmask_path = './data/old_mask/'image_path = './data/old_images/'mask_save_path = './data/mask/'image_save_path = './data/images/'num = 100 123456789def RandomFilp(image, mask): '''随机翻转''' if random.random() &gt; 0.5: image = tf.hflip(image) mask = tf.hflip(mask) else: image = tf.vflip(image) mask = tf.vflip(mask) return image, mask 123456def RandomRotation(image, mask): '''随机旋转''' angle = transforms.RandomRotation.get_params([-180, 180]) image = tf.rotate(image, angle, resample=Image.NEAREST) mask = tf.rotate(mask, angle, resample=Image.NEAREST) return image, mask 1234567891011121314def RandomCrop(image, mask): '''随机裁剪''' if random.random() &gt; 0.5: i, j, h, w = transforms.RandomResizedCrop.get_params( image, scale=(0.5, 1.0), ratio = (1,1)) image = tf.resized_crop(image, i, j, h, w, (396, 476)) mask = tf.resized_crop(mask, i, j, h, w, (396, 476)) else: pad = random.randint(0, 192) image = tf.pad(image, pad) image = tf.resize(image, (396, 476)) mask = tf.pad(mask, pad) mask = tf.resize(mask, (396, 476)) return image, mask 1234567891011121314151617181920def transform(image, mask): # 旋转 # angle是-180到180的随机数 angle = transforms.RandomRotation.get_params([-180, 180]) image = tf.rotate(image, angle, resample=Image.NEAREST) mask = tf.rotate(mask, angle, resample=Image.NEAREST) # 随机翻转 if random.random() &gt; 0.5: image, mask = RandomFilp(image, mask) # 随机裁剪 if random.random() &gt; 0.5: image, mask = RandomCrop(image, mask) # 随机旋转 if random.random() &gt; 0.5: image, mask = RandomRotation(image, mask) return image, mask 123456789101112def Augmentation(): '''数据增强''' images_name = os.listdir(image_path) j = 1; for image_name in images_name: for i in range(num): image = Image.open(image_path + image_name) mask = Image.open(mask_path + image_name) new_image, new_mask = transform(image, mask) new_image.save(image_save_path + str(j) + '.png') new_mask.save(mask_save_path + str(j) + '.png') j += 1 12if __name__ == '__main__': Augmentation() Dataloader创建12345678from torch.utils.data import Dataset, DataLoader, random_splitimport torchvision.transforms as transformsimport osimport PIL.Image as Imageimport numpy as npimg_path = './data/images/'msk_path = './data/mask/' 123456transform = transforms.Compose([ transforms.ToTensor(), transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5])])target_transform = transforms.ToTensor() 12345678910111213141516171819202122class SpineData(Dataset): def __init__(self, transform=None, target_transform=None): self.transform = transform self.target_transform = target_transform def __len__(self): return len(os.listdir(img_path)) def __getitem__(self, idx): image_name = os.listdir(img_path)[idx] image = Image.open(img_path + image_name).convert('RGB') image = image.resize((256, 256)) # 统一大小可以加快训练速度 mask = Image.open(msk_path + image_name).convert('L') mask = mask.resize((256, 256)) # 将image和mask都转为Tensor格式 if self.target_transform: mask = self.target_transform(mask) if self.transform: image = self.transform(image) return image, mask 123456789101112spine_data = SpineData(transform, target_transform)train_size = int(0.9 * len(spine_data))test_sizee = len(spine_data) - train_sizetrainset, testset = random_split(spine_data, (train_size, test_sizee))trainloader = DataLoader(trainset, batch_size=4, shuffle=True, num_workers=2)testloader = DataLoader(testset)dataiter = iter(trainloader)img, msk = dataiter.next() Unet网络搭建123import torch.nn as nnimport torch.nn.functional as Fimport torch 12345678910111213class DoubleConv(nn.Module): def __init__(self,in_ch,out_ch): super(DoubleConv,self).__init__() self.conv = nn.Sequential( nn.Conv2d(in_ch,out_ch,3,padding=1),# in_ch、out_ch是通道数 nn.BatchNorm2d(out_ch), nn.ReLU(inplace = True), nn.Conv2d(out_ch,out_ch,3,padding=1), nn.BatchNorm2d(out_ch), nn.ReLU(inplace = True) ) def forward(self,x): return self.conv(x) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class UNet(nn.Module): def __init__(self, in_ch, out_ch): super(UNet, self).__init__() super(UNet,self).__init__() self.conv1 = DoubleConv(in_ch,64) self.pool1 = nn.MaxPool2d(2) self.conv2 = DoubleConv(64,128) self.pool2 = nn.MaxPool2d(2) self.conv3 = DoubleConv(128,256) self.pool3 = nn.MaxPool2d(2) self.conv4 = DoubleConv(256,512) self.pool4 = nn.MaxPool2d(2) self.conv5 = DoubleConv(512,1024) #逆卷积 self.up6 = nn.ConvTranspose2d(1024,512,2,stride=2) self.conv6 = DoubleConv(1024,512) self.up7 = nn.ConvTranspose2d(512,256,2,stride=2) self.conv7 = DoubleConv(512,256) self.up8 = nn.ConvTranspose2d(256,128,2,stride=2) self.conv8 = DoubleConv(256,128) self.up9 = nn.ConvTranspose2d(128,64,2,stride=2) self.conv9 = DoubleConv(128,64) self.conv10 = nn.Conv2d(64,out_ch,1) def forward(self, x): c1 = self.conv1(x) p1 = self.pool1(c1) c2 = self.conv2(p1) p2 = self.pool2(c2) c3 = self.conv3(p2) p3 = self.pool3(c3) c4 = self.conv4(p3) p4 = self.pool4(c4) c5 = self.conv5(p4) up_6 = self.up6(c5) merge6 = torch.cat([up_6,c4],dim=1)# 按列拼接 c6 = self.conv6(merge6) up_7 = self.up7(c6) merge7 = torch.cat([up_7,c3],dim=1) c7 = self.conv7(merge7) up_8 = self.up8(c7) merge8 = torch.cat([up_8,c2],dim=1) c8 = self.conv8(merge8) up_9 = self.up9(c8) merge9 = torch.cat([up_9,c1],dim=1) c9 = self.conv9(merge9) c10 = self.conv10(c9) out = nn.Sigmoid()(c10)# 化成(0~1)区间 return out 网络训练与测试123456import torch.optim as optimfrom data_loader import trainloader, testloaderfrom unet import UNetimport torch.nn as nnimport torchimport numpy as np 12device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")model = UNet(3, 1) 1234567891011121314151617181920def train_model(model, criterion, optimizer, num_epochs=2): for epoch in range(num_epochs): print('Epoch &#123;&#125;/&#123;&#125;'.format(epoch, num_epochs - 1)) print('-' * 10) dataset_size = len(trainloader.dataset) epoch_loss = 0 step = 0 #minibatch数 for x, y in trainloader:# 分100次遍历数据集，每次遍历batch_size=4 optimizer.zero_grad()#每次minibatch都要将梯度(dw,db,...)清零 inputs = x labels = y outputs = model(inputs)#前向传播 loss = criterion(outputs, labels)#计算损失 loss.backward()#梯度下降,计算出梯度 optimizer.step()#更新参数一次：所有的优化器Optimizer都实现了step()方法来对所有的参数进行更新 epoch_loss += loss.item() step += 1 print("%d/%d,train_loss:%0.3f" % (step, dataset_size // trainloader.batch_size, loss.item())) print("epoch %d loss:%0.3f" % (epoch, epoch_loss)) 1234def train(): criterion = nn.BCELoss() optimizer = optim.Adam(model.parameters()) train_model(model, criterion, optimizer) 123456789101112131415161718import matplotlib.pyplot as pltdef test(): with torch.no_grad(): for idx, (x, _) in enumerate(testloader): y = model(x) print("y:") print(y) print(y.shape) img_y = torch.squeeze(y).numpy() # 去掉batch_size和channel,这两者均为1 print("img_y:") print(img_y) plt.imshow(img_y) print(img_y.shape) plt.axis('off') plt.subplots_adjust(top = 1, bottom = 0, right = 1, left = 0, hspace = 0, wspace = 0) plt.margins(0,0) print("./result/result&#123;&#125;.jpg".format(idx)) plt.savefig("./result/result&#123;&#125;.jpg".format(idx), dpi=100) 12train()test()]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>Architecture</tag>
        <tag>Unet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PC端和ipad端如何同步PDF]]></title>
    <url>%2F2019%2F04%2F21%2FPC%E7%AB%AF%E5%92%8Cipad%E7%AB%AF%E5%A6%82%E4%BD%95%E5%90%8C%E6%AD%A5PDF%2F</url>
    <content type="text"><![CDATA[使用坚果云和福昕阅读器进行PC端和ipad端的PDF同步1. 在PC端和ipad端同时下载福昕阅读器2. PC端安装坚果云并注册坚果云账号账户信息——&gt;安全选项——&gt;添加应用然后可以得到应用密码，在后面会用到 3. 点击create sync folder设置需要同步的文件夹4. 在ipad端进行设置1.选择cloud点击add选择添加WebDAV2.输入Title，URL(地址是https://dav.jianguoyun.com/dav/),Login(你注册坚果云时候的邮箱)，password（你的坚果云密码），然后save，就可以访问你在PC端设置的同步文件夹了 无论是在PC端还是在ipad端修改PDF后，双方都会立即更新同步信息。]]></content>
      <categories>
        <category>Solutions</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[如何利用github pages打造自己的博客]]></title>
    <url>%2F2019%2F04%2F15%2F%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8github%20pages%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[打造自己的博客（github pages + Hexo + NextT）github创建仓库选择new repositories创建一个仓库，注意仓库的名字是用户名.github.io 安装Hexo1) 安装nodejsm1sudo apt-get install nodejs 2) 安装git1sudo apt-get install git 3) 安装npm1sudo apt-get install npm 4) npm换源(永久换成淘宝源)1npm config set registry https://registry.npm.taobao.org 5) 安装hexo1sudo npm install -g hexo-cli 建站１）创建一个文件夹（作为博客根目录），比如：1mkdir myBlog 2) 初始化博客1npm init myBlog 3) 安装必要依赖12cd myBlognpm install 4) 关联github pages12//在myBlog目录下执行gedit _config.ymｌ 找到deploy,更换成如下内容：1234deploy: type: git repository: git@github.com:用户名/用户名.github.io.git branch: master 换主题：NextT1) 从github上clone NexT1git clone https://github.com/iissnan/hexo-theme-next themes/next //在myBLog目录下执行 2) 更换主题打开myBlog目录下的_config.yml，找到theme: landscape改为theme: next 3) 运行hexo s查看效果 域名绑定1) 申请阿里云域名2) 域名解析在域名界面点击解析，再点击添加记录，分别添加以下两项记录：a)记录类型：CNAME主机记录：@解析线路：默认记录值：用户名.github.ioTTL：10分钟b)记录类型：CNAME主机记录：www解析线路：默认记录值：用户名.github.ioTTL：10分钟 最好使用CNAME，因为ip地址可能会改变。 美化nextT参考博客：http://jeffyang.top/Hexo/Hexo%E4%B8%BB%E9%A2%98Next%E7%BE%8E%E5%8C%96/https://www.jianshu.com/p/f054333ac9e6http://www.yangyong.xyz/2018/01/03/add-hexo-next-post-views/ 阅读次数http://duansm.top/2018/08/03/hexo-next/http://www.yamllint.com/ 检测yaml是否有问题 如何发表与删除文章1) 新建文章1234hexo new a // 生成post，新建并发布文章a，出现在source/_posts中hexo new draft b // 生成draft，新建草稿，出现在source/_drafts中hexo server --draft // 预览草稿hexo publish b // 发布草稿 默认hexo new是生成post，如果要改成其他的（比如draft），可以在myBlog下的_config.yml文件中找到default_layout进行修改，其参数值有：post，draft和page 2）删除文章进入source/_posts文件夹中，找到要删除的md文件，直接本地删除，然后依次执行12hexo ghexo]]></content>
      <categories>
        <category>Solutions</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
