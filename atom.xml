<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yevette&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-10T13:30:50.286Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yevette</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mac下vscode环境配置</title>
    <link href="http://yoursite.com/2020/01/10/mac%E4%B8%8Bvscode%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/01/10/mac下vscode环境配置/</id>
    <published>2020-01-10T13:09:08.000Z</published>
    <updated>2020-01-10T13:30:50.286Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、官网下载VS-code"><a href="#一、官网下载VS-code" class="headerlink" title="一、官网下载VS code"></a>一、官网下载VS code</h3><h3 id="二、配置环境"><a href="#二、配置环境" class="headerlink" title="二、配置环境"></a>二、配置环境</h3><h5 id="只要下载一个c-c-和code-runner就行了（具体过程忘了，可详见下面的参考文献）"><a href="#只要下载一个c-c-和code-runner就行了（具体过程忘了，可详见下面的参考文献）" class="headerlink" title="只要下载一个c/c++和code runner就行了（具体过程忘了，可详见下面的参考文献）"></a>只要下载一个c/c++和code runner就行了（具体过程忘了，可详见下面的参考文献）</h5><h5 id="ctrl-option-n是运行代码"><a href="#ctrl-option-n是运行代码" class="headerlink" title="ctrl+option+n是运行代码"></a>ctrl+option+n是运行代码</h5><h5 id="F5是调试"><a href="#F5是调试" class="headerlink" title="F5是调试"></a>F5是调试</h5><p><img src="/images/mac下vscode环境配置/image-20200110213011264.png" alt="image-20200110213011264" style="zoom:50%;"></p><h3 id="四、问题"><a href="#四、问题" class="headerlink" title="四、问题"></a>四、问题</h3><h5 id="1-Could-not-find-the-task-‘clang-build-active-file’"><a href="#1-Could-not-find-the-task-‘clang-build-active-file’" class="headerlink" title="1.Could not find the task ‘clang++ build active file’."></a>1.Could not find the task ‘clang++ build active file’.</h5><p>解决方法：应该用clang++而不是clang的配置文件</p><h3 id="三、参考文献"><a href="#三、参考文献" class="headerlink" title="三、参考文献"></a>三、参考文献</h3><p>1.<a href="https://blog.csdn.net/qq_22073849/article/details/88895786" target="_blank" rel="noopener">MAC visual Studio Code 运行 调试c/c++ 配置（完美解决）</a></p><p>2.<a href="https://zhuanlan.zhihu.com/p/36918807" target="_blank" rel="noopener">用vscode调试时,使用调试控制台而不是集成的终端</a></p><p>3.<a href="https://segmentfault.com/q/1010000006781641/a-1020000006782631" target="_blank" rel="noopener">vs code中如何强制捕获输出到调试控制台</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、官网下载VS-code&quot;&gt;&lt;a href=&quot;#一、官网下载VS-code&quot; class=&quot;headerlink&quot; title=&quot;一、官网下载VS code&quot;&gt;&lt;/a&gt;一、官网下载VS code&lt;/h3&gt;&lt;h3 id=&quot;二、配置环境&quot;&gt;&lt;a href=&quot;#二、配
      
    
    </summary>
    
      <category term="Solutions" scheme="http://yoursite.com/categories/Solutions/"/>
    
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
      <category term="VScode" scheme="http://yoursite.com/tags/VScode/"/>
    
  </entry>
  
  <entry>
    <title>无线局域网WLAN</title>
    <link href="http://yoursite.com/2019/10/25/%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91WLAN/"/>
    <id>http://yoursite.com/2019/10/25/无线局域网WLAN/</id>
    <published>2019-10-25T02:02:59.000Z</published>
    <updated>2019-10-25T02:14:41.624Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Subjects" scheme="http://yoursite.com/categories/Subjects/"/>
    
    
      <category term="Computer Networking" scheme="http://yoursite.com/tags/Computer-Networking/"/>
    
  </entry>
  
  <entry>
    <title>mac下如何修改单个程序的默认语言</title>
    <link href="http://yoursite.com/2019/10/15/mac%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%8D%95%E4%B8%AA%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%BB%98%E8%AE%A4%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2019/10/15/mac下如何修改单个程序的默认语言/</id>
    <published>2019-10-15T02:25:22.000Z</published>
    <updated>2019-10-15T02:39:12.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a>永久修改</h1><h2 id="获取App的Bundle-Indentifier"><a href="#获取App的Bundle-Indentifier" class="headerlink" title="获取App的Bundle Indentifier"></a>获取App的Bundle Indentifier</h2><p>Bundle Indentifier是mac下应用软件的标识，以MarginNote3为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdls -name kMDItemCFBundleIdentifier /Applications/MarginNote\ 3.app</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kMDItemCFBundleIdentifier = &quot;QReader.MarginStudyMac&quot;</span><br></pre></td></tr></table></figure><h2 id="修改应用程序默认语言"><a href="#修改应用程序默认语言" class="headerlink" title="修改应用程序默认语言"></a>修改应用程序默认语言</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write QReader.MarginStudyMac AppleLanguages &apos;(&quot;zh_CN&quot;)&apos;</span><br></pre></td></tr></table></figure><p><em>如果要改成繁体，可以使用zh_TW（Chinese Taiwan）</em></p><h1 id="临时修改"><a href="#临时修改" class="headerlink" title="临时修改"></a>临时修改</h1><p>使用参数-AppleLanguages可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -a /Applications/Safari.app --args -AppleLanguages &apos;(zh-CN)&apos;</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="查找一个应用支持的界面语言"><a href="#查找一个应用支持的界面语言" class="headerlink" title="查找一个应用支持的界面语言"></a>查找一个应用支持的界面语言</h2><p>1.Finder中找到该应用，右键显示包内容，然后查看/Contents/Resources目录下以.lproj结尾的语言文件目录。</p><p>2.使用终端查看：</p><p><img src="/images/mac下如何修改单个程序的默认语言/image-20191015103809456.png" alt="image-20191015103809456" style="zoom:50%;"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/mzbonnt/article/details/80071582" target="_blank" rel="noopener">Mac修改单个应用程序默认语言</a></p><p><a href="https://sspai.com/post/44536" target="_blank" rel="noopener">如何临时修改 macOS 应用的界面语言</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;永久修改&quot;&gt;&lt;a href=&quot;#永久修改&quot; class=&quot;headerlink&quot; title=&quot;永久修改&quot;&gt;&lt;/a&gt;永久修改&lt;/h1&gt;&lt;h2 id=&quot;获取App的Bundle-Indentifier&quot;&gt;&lt;a href=&quot;#获取App的Bundle-Indentif
      
    
    </summary>
    
      <category term="Solutions" scheme="http://yoursite.com/categories/Solutions/"/>
    
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>如何通过PyCharm远程连接服务器</title>
    <link href="http://yoursite.com/2019/10/11/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87PyCharm%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2019/10/11/如何通过PyCharm远程连接服务器/</id>
    <published>2019-10-11T01:28:00.000Z</published>
    <updated>2019-10-13T01:36:39.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>1.打开tools中，打开deployment中的configuration</p><p><img src="/images/如何通过PyCharm远程连接服务器/image-20191011094220862.png" alt="image-20191011094220862" style="zoom:50%;"></p><p>2.如下填写</p><p><img src="/images/如何通过PyCharm远程连接服务器/image-20191011094732158.png" alt="image-20191011094732158" style="zoom:50%;"></p><p>3.这个操作会在编译的时候将本地路径映射为服务器上指定路径（注意部署路径是相对地址，前面要加一个/，表示前面设置的工作路径）</p><p><img src="/images/如何通过PyCharm远程连接服务器/image-20191011095015968.png" alt="image-20191011095015968" style="zoom:50%;"></p><p><em>Excluded Paths用来设置一些不想同步的文件夹</em></p><h2 id="远程python解释器配置"><a href="#远程python解释器配置" class="headerlink" title="远程python解释器配置"></a>远程python解释器配置</h2><p>1.点击Preferences（mac系统下，windows系统下应该是File &gt; Settings）</p><p><img src="/images/如何通过PyCharm远程连接服务器/image-20191011100316436.png" alt="image-20191011100316436" style="zoom:50%;"></p><p>2.点击Project Interpreter</p><p><img src="/images/如何通过PyCharm远程连接服务器/image-20191011101240014.png" alt="image-20191011101240014" style="zoom:50%;"></p><p>3.点击add</p><p><img src="/images/如何通过PyCharm远程连接服务器/image-20191011101414324.png" alt="image-20191011101414324" style="zoom:50%;"></p><p>4.选择SSH Interpreter</p><p><img src="/images/如何通过PyCharm远程连接服务器/image-20191011101528933.png" alt="image-20191011101528933" style="zoom:50%;"></p><p>5.输入密码</p><p><img src="/images/如何通过PyCharm远程连接服务器/image-20191011101628580.png" alt="image-20191011101628580" style="zoom:50%;"></p><p>6.<img src="/images/如何通过PyCharm远程连接服务器/Screen Shot 2019-10-11 at 10.19.43 AM.png" alt="Screen Shot 2019-10-11 at 10.19.43 AM" style="zoom:50%;"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>1.首先在Pycharm中创建一个工作目录（路径和上面同步的路径一样）。</p><p>2.点击tools中deployment下的browse remote host</p><p><img src="/images/如何通过PyCharm远程连接服务器/image-20191011104324194.png" alt="image-20191011104324194" style="zoom:50%;"></p><p>3.可以选择对应的目录右击选择“Download from here”，将文件下载到本地（或者在）</p><p><img src="/images/如何通过PyCharm远程连接服务器/image-20191011104351462.png" alt="image-20191011104351462" style="zoom:50%;"></p><p><em>注意：只有上面设置了同步的文件夹才能下载到本地</em></p><p>4.远程连接服务器终端</p><p><img src="/images/如何通过PyCharm远程连接服务器/image-20191011105334643.png" alt="image-20191011105334643" style="zoom:50%;"></p><p>5.在本地项目文件夹中修改代码，按command + s保存（ctrl + s）后，自动同步到远程服务器上，然后再在远程服务器的终端上提交相应的脚本（或者直接在本地运行，这时候使用的是远程服务器下的python解释器）</p><p><em>注意：如果在Remote Host中修改代码后，还需要Download到本地，而且在Remote Host上修改代码的时候不能直接执行代码，所以最好还是在本地修改代码后，自动上传到服务器比较方便。</em></p><h3 id="同步更新（本地到服务器）"><a href="#同步更新（本地到服务器）" class="headerlink" title="同步更新（本地到服务器）"></a>同步更新（本地到服务器）</h3><p>可以在tools的deployment下的option中进行设置</p><p><img src="/images/如何通过PyCharm远程连接服务器/image-20191011103903833.png" alt="image-20191011103903833"></p><p>第一个表示自动同步，第二个表示command + s保存的时候进行同步，第三个表示永远不同步。</p><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>1.如果终端进行了某种操作而Remote Host上未同步的话，可以点击刷新按钮。</p><p> <img src="/images/如何通过PyCharm远程连接服务器/image-20191011110025124.png" alt="image-20191011110025124" style="zoom:50%;"></p><p>2.如果要进行debug的话，就跟在本地的debug一样。</p><h3 id="一些疑问："><a href="#一些疑问：" class="headerlink" title="一些疑问："></a>一些疑问：</h3><p>1.在远程服务器的改动是否能自动同步到本地，而不使用download？</p><p>2.部署中的文件夹和配置python解释器中的文件夹有什么不同？</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1.<a href="https://blog.csdn.net/xuezhangjun0121/article/details/80665808" target="_blank" rel="noopener">PyCharm 配置远程python解释器和在本地修改服务器代码</a></p><p>2.<a href="https://zhuanlan.zhihu.com/p/38330654" target="_blank" rel="noopener">教程 | 使用 PyCharm 连接服务器进行远程开发和调试</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;部署&quot;&gt;&lt;a href=&quot;#部署&quot; class=&quot;headerlink&quot; title=&quot;部署&quot;&gt;&lt;/a&gt;部署&lt;/h1&gt;&lt;p&gt;1.打开tools中，打开deployment中的configuration&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/如何通过Py
      
    
    </summary>
    
      <category term="Solutions" scheme="http://yoursite.com/categories/Solutions/"/>
    
    
      <category term="Pycharm" scheme="http://yoursite.com/tags/Pycharm/"/>
    
  </entry>
  
  <entry>
    <title>微机原理第二章总结</title>
    <link href="http://yoursite.com/2019/10/08/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/10/08/微机原理第二章总结/</id>
    <published>2019-10-08T02:48:09.000Z</published>
    <updated>2019-10-08T12:36:16.391Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="Hey, password is required here." />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="66ff6e34e29ff6f8c72a02d493a66912c9dd86b055d94a5e6c91ea2cf09bc456">c514f74ef81faeedbcff4ac91c990caadb1ad7f835e3592ca41610cf5afe411188a0752e0ba1929f8996d8c4b0ac79f89267d4f7ad476da05782ad436aaf2bf2c3cf819aa8795502064621b5b954018bfe1d8c2e223961d2751422242328983f254b8b1f7262fa47b9608fec80868757d88d03887346f189b5ec8c3edfaea923d2387241d8619627a4e032037a7628e9e7dcc7ae973ec4078ef989008d38c3ddd7a99eb36d06e6d4f790f62dab0c6c95cecb7693535884094cf4959e31a844efb88682dbbffd420fce0f1ce7731bb1f92901d0188b3958952716df9cdbf8471a22540ec327c5ef1b62700cded1b5e3a0e2a790695cf0586a3b53716ae56abddf20ab4f1b4f22256d716b3e01c3629a528dc22bf8e5edb4e3a489891b74c9021517fff4a4a7e36c2c86b51c59f84307aefcb565110124e1204b10fd48c5530d9432394751912a087ecb2b06ebdb8f3e4b1605fa238af078aedc3d7d7c4e692899c8a6186574c9774e3717cb0bf840a28c819313d61add4d142ad2f6d7f7a92b67728c012e916ef93fffc324ea6c4caad05a25efd5c59047c5a33985ae1838491ae02be32f1de8f29608461296bcc898dc62b00ec9e778a75026624559a816d8204b7c8d127e76f1c2a3e903b6078ca08822f72401d6352cdf60d56ac35a67ad19e9d82d197b5abc5b3de0f7c5c82b0bb40437ce11236de77a243a7c55134b6be1136e86c67b85ad9785443956494cc9fc82c0f6c446dd5da62ce5d5c969b251627b27b8c2049467a1100abfb303f5a139ecbc5e6d68ba16a8c414da0fa387da9b886aa6814cd5049573ab34a203adf39748b572f3dc3d0540e6135543b2c15c927e9f2bef8cfecd65034a8528a4ef479e1ab7529d63585f9d6a1d0ba7bda4087eae634dbea709f0496046e5fbc12b0bfaf39bb4c9de3ea332cb399b54dd063285d7263fb8f490aede00079b060e68c41789310adb52da4cf0691fd00d59a2c0770883bae7fa9bd7e778669c59e1c0912c1d898a67d0c5606b5b34df82616d92c06892fa0f3993eabfa1b48ff7a4a55b3245e9100f51a2daecabee82c9001393adf1725aba512e69f058fdde5ee7c4bc6d4f53c1d2c1746d7980d56fe67393e8c35b15b9d33b54bb46e2cd817ff7033c472c212aa0f1f65424f4bb7963e58e914ca35dcb2667b69f94dc24a36dfe34974bed37b84579cd5662d1c26d69ce9e3b908c013acff4d1a074be8aaca7ea7cd321a3cb02e8967fdc06c55f8dd8bc9cef706c0a438a41c3a857c80c8c369e994fe8b5207ae5575c84708e8bfd92a5d89548ddcaa035aff4ca85c74185f1272e6d6b64dc4583f73dbfbcfd82b9150915f17574770ba26f10739daf9201684c37c87d994ebbb4ee3884d6ddb3cb6992d6ec15cf2beb9b02c316bff52ada47ccae5f861aeaa4f37b432654e5e89f07a8c9dc6f58f699d61a15e516a170e39caf20ab2a82608751d7df19869e832dc774f63a3e636f309497b363575aab266c9db51dc8822ae7fd763808ed7ac59b982bd0e31a706f72e40889f59e556c9da6807cd901f86f5923c331d1c842484ca0822060811088a57079f8ec1fcc5000534cfbc63e069e956b19aad4d992411606f7537b8900f82c606f865712abe1fcf57633b80a760f74afdaff6218ed1233464637f9aec6bdb85dd58a5ed9750b901eb469fb434c1f24cfc420f7d31b708ea0b98234fb3fc93eb67b5804477ea5ab3f5ce4e9023e5095b171af869d957ad84cd748e38fe3fa1d248d4559f375db3b6a652f5fb403691eb61109c12b0f13059b38fcd8c702d41f6870da4f0e5a8047e30f5aa69b13077c92c82c2bd12eca80ee6c5158c61cba0e1afe19c8cc4fd35a7821418f09e8167f728c237a2429ae7de733349accb17f5c8e9a755fd6fedc968ea687840fb7d6d294abea4b3df7feadb70b478516efc2c6c29416c99c444181f0bb4cbd422e9cc50958176bce1fb84ea480f809b45ee5fc56085e76a3fdbe21c92d5a599876a2a1ce6b8e7bb30416f638c148525a1bcd53c65d1596211166f734bbfc3b3d98b9a2495d548501bea8c2c55c343b391f623915222ed0776215f2662a1db53bf8bf7776bc9beb97d692475f3983f8ab7f82a0d58950cdb0ef4b93f169fc3b282d4bffddeed716a6fb87c51ccfb0d266c12f64a143f77a1ab5f94fa582c2342071ec5ea0c278e4ae955535a5bffba028deaa57a6ac8e1af8cac36f05e33f49be6f15ec390d1efb6b961c49c73dc5df22543bd127903e408dc75a82e3398af2fa4e30b4b0ec1f54e7b2a1ddf947e83ced6b1990f78fed1bad81098040cc3b3b25a4576745738163716a958ed3a32070c5a72eda63e5cc7c7f8ddcfed0573a997e1fe2ced8f088bdbbfed76438abb40ac3ca4192131d89266e6d5b6cd9fc600121c6a2ede4659219602026fb331a731f707a05ccb20e675732925e492d43ff5cd78908fcaa4ba7cd4bde8f1ed8d88665f85fe9d64dcb839d472f17476c5e787c52fe15ec3ff20e7d0ffc19cd2064858f6fb14252064e60781e1380bafe38e903a1f84557fd3022cc375797c88f3fd6d53af058adfa405f51d2b12f11ce1ed83871ad8174955938ffcc19bc339d21dfa1b5cb5954cd38e1f884e4118141d60b27998d5e1e54791afc73910057d7d518b6be6d1a5a4fc646170a4a350e42bd57dd33302bd9305380529733cf4e1debea963d67faefe09967a60809d72da26b2ac73eff84851053321affa13587f641312d7e5505a991663e090e20408f66f15550e29afa9ca4d93c102e0b1c6f2af9945b7e79a27fa8d580c30a6ebc0ce008cd03e31eeb893f6b1ccdbd6cbd337c6789712b9d19f1fe19625f540ab4f02a2a8dceb580c284e3b6c77e36654855579e12900bf043b590b90413fbd875f5fe3b70800ea3f813c3158826f7d7953ebe712b5d2c479d6ec69fadcffdacc0e83c6df70d1acd7e2d5aeb574affaff2328cd7636c620abf0b66006a719665f56761b25ccf44ef927afc99fee473ea3c1e363fc5e756309762221d1666ef44fea2740c78e38ac8083a848cb2ea36fc91527796abf5c40df66801a85cb4639da5d8a3c66cfbb141ca4d4fafe9a2ebb14d04bbd9b44a8b581933f4b3f97b204e20c5d1895517efa3f6a0b34a39027cc5aefd437cfb74ee6e6958f862aff7adf60bd0dd55a4607907a4c022f9f72274229b045368635357719b3e0f1f92fb0a5c410db0a0457c203f8dff9ba9c505efc181914e01a8878c3b9ab7bd15073a1e7d59e1898c3472535ef4f49b8d2a08603584d9b5a3d72e284f77f18336e0f285ee19f881aceae003f98034d017e560fa602cb74b37f0909906ea4d0ccf19b973d42c990a158f98df58204bfebcb25f4be939dd3209078ded7444bf55fc7c782aaa52502afd5c6d7be306bdb414789eccaaa0b98800f19b49f8d70ee37eb8fc3a29538b5e6703364c849d576117d0349a0c62bccff8c383b076d40b5cb11a8b75a630af985681d82093508118edb32e7242738305f949e0dcd1cdf881fba3103a7613987f876f5ec36be216e2b9aeb1d2f8d7afdc16a971774e69557297dcd8fef2a848e1a245d59c41373ae1cf0581e96f9ef9f9b01091146d30d02b79d1dbcc36d2ffc9797160e1ed21e432739627f1b0e87995f6cdefee2dfb088c5156b6bd37e1fc46577c43a5075959532fa124eae5e1aa23955968763920d436a6789704cd6324e949b7daed6fc8100da959dcb67ba7478251a39bd776d3b42ed2fb9867c40d21d8a5109ec9a44c76c27a568a56e5b7a7d0ab5377b8dfcf412481236137da6a88a691de1b0e20a7d815807bb6def239f3fed98f8233544f39b5901ee4135378aeeeaabb144d45748ed9ffed2126e7d6667cd8999d0434003ee441c3936eca7110667cb0813c71664284446f8e12b76959d5ca4752dd0f3ec139a03523788e2310a65ea7cd8257393a466b80f0a7f70525f268e72a293fec52a7f06da0df5099398696c0edeb6ca80e27469a219b3629854eb3ad09c1cd5da682e6098b53b8a5886d05fd56c01ebb38e56af1542f073d3a84d560420fd7ac76368d8f77f8976507fa9dcb5e53bdf9fdfe005174e2d31e3adeda58a619b696587d8873dafa97e7f1fe33c8231889f70f8954d1b44eb96ee8c16a70ebe268300db0b5298451391511aab1b4b642d411e885d6ecfd24fd98d5e574b4d1d512ab6834c624fcd92728c89dcdb46370b59a14852410f2ea09a571495ac8669d05a1cfd5be8ad75a2eec98a0129bf587a233c8cac6182809e4e707b87ad2012ef602d2393e0831fa8699d5a4a4137fffec2da416353a5e0f5f93add1afde6d937c5c9d288dfebbeefa0495a4a64ecced9386ace2f24349d1f66997bf2e4f0f8f9e9564831601845700454e86b05c67b146b223fdf3d1f3dd25640b70b1ad88838987155965ea86ebd35d93ddaf23b522e7521fac40d08c088538e4b093dcb590950ef32f6f291e001bf926fc28ee0ba77970d2648f232babdc7fcc8228bcd00171d81fdd018ab20b320fc30a1f1370489db3caa5f89e2ddbf447ff14b8971329ed86ecc312d99260abf7676d777ebc95df794228454c9fa99cb72f68bd853441de01571f3b25ac3235ee28be3c564ce2de558d6f99a4a0170da3ccf194768cb83271b8890e8e375a31d2abc58af4e1dab9127061a69bfdf4ad5bb9ab18a8b7f1ef2039eb480ae5995a3e64d6dac608e3fee7c35fee1312a4c96aa204e07e5538fa777f617f823e6b180ae155b849122ab17da9a880cbe8dd458cb5b0083bb045a8d28740b7f5becc8888167b3b5318d4300690c57ca2791156e0e6c0834c0aafb8ecd9682c12bebb2268664ee5e8ab0c492b2599d9c9635af424e2ee135bf21a417d10f0e14369e09aa086c247e7c1e8aa810be82db532beeb7c7cc0e238d3bc50356f527c326bc1a647bbfd910c4ad784c3f98f97cca29e83e070effa60314c53ea3a7fbc24dd3ab0ce882945bd48b2f46ec4f0691410a79a2d7dc1c90633cc</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="Subjects" scheme="http://yoursite.com/categories/Subjects/"/>
    
    
      <category term="The Principle of Microcomputer" scheme="http://yoursite.com/tags/The-Principle-of-Microcomputer/"/>
    
  </entry>
  
  <entry>
    <title>Revisiting CycleGAN for semi-supervised segmentation阅读笔记</title>
    <link href="http://yoursite.com/2019/10/06/Revisiting%20CycleGAN%20for%20semi-supervised%20segmentation%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/10/06/Revisiting CycleGAN for semi-supervised segmentation阅读笔记/</id>
    <published>2019-10-06T10:52:21.000Z</published>
    <updated>2019-10-09T15:42:32.273Z</updated>
    
    <content type="html"><![CDATA[<p>2019</p><h1 id="CONTRIBUTIONS"><a href="#CONTRIBUTIONS" class="headerlink" title="CONTRIBUTIONS"></a>CONTRIBUTIONS</h1><p>1.这是第一个使用CycleGAN来学习无标注图像和ground truth mask之间的循环一致性映射的半监督分割方法。提出的方法作为一种无监督正则项，当标签数据不足时可以提高分割性能。</p><p>2.在三个挑战分割任务上进行了验证。</p><p>3.进行了消融实验。</p><h1 id="DETAILS"><a href="#DETAILS" class="headerlink" title="DETAILS"></a>DETAILS</h1><p>略</p><h1 id="ARCHITECTURE"><a href="#ARCHITECTURE" class="headerlink" title="ARCHITECTURE"></a>ARCHITECTURE</h1><p>两个条件生成器 + 两个判别器</p><p><img src="/images/Revisiting-CycleGAN-for-semi-supervised-segmentation阅读笔记/image-20191006191314362.png" alt="image-20191006191314362" style="zoom:50%;"></p><p>​              </p><h1 id="LOSS"><a href="#LOSS" class="headerlink" title="LOSS"></a>LOSS</h1><h2 id="生成器Loss"><a href="#生成器Loss" class="headerlink" title="生成器Loss"></a>生成器Loss</h2><p><img src="/images/Revisiting-CycleGAN-for-semi-supervised-segmentation阅读笔记/image-20191006191422810.png" alt="image-20191006191422810" style="zoom:50%;">(训练分割网络)</p><p><img src="/images/Revisiting-CycleGAN-for-semi-supervised-segmentation阅读笔记/image-20191006191458953.png" alt="image-20191006191458953" style="zoom:50%;">(训练重建网络)</p><p>其中<img src="/images/Revisiting-CycleGAN-for-semi-supervised-segmentation阅读笔记/image-20191006191633909.png" alt="image-20191006191633909" style="zoom:50%;"></p><h2 id="判别器Loss"><a href="#判别器Loss" class="headerlink" title="判别器Loss"></a>判别器Loss</h2><p><img src="/images/Revisiting-CycleGAN-for-semi-supervised-segmentation阅读笔记/image-20191006191732872.png" alt="image-20191006191732872" style="zoom:50%;">（训练mask判别器）</p><p><img src="/images/Revisiting-CycleGAN-for-semi-supervised-segmentation阅读笔记/image-20191006191756663.png" alt="image-20191006191756663" style="zoom:50%;">（训练图像判别器）</p><p>注意这里的mask是指由ground truth mask和未标注图像分割生成的mask；这里的图像是指ground truth mask重建生成的图像和未标注图像。</p><h2 id="循环一致性Loss"><a href="#循环一致性Loss" class="headerlink" title="循环一致性Loss"></a>循环一致性Loss</h2><p><img src="/images/Revisiting-CycleGAN-for-semi-supervised-segmentation阅读笔记/image-20191006192008326.png" alt="image-20191006192008326" style="zoom:50%;">（未标注图像）</p><p><img src="/images/Revisiting-CycleGAN-for-semi-supervised-segmentation阅读笔记/image-20191006192018577.png" alt="image-20191006192018577" style="zoom:50%;">（ground truth mask）</p><p>因此</p><p><img src="/images/Revisiting-CycleGAN-for-semi-supervised-segmentation阅读笔记/image-20191006192135076.png" alt="image-20191006192135076" style="zoom:50%;"></p><h1 id="CONCLUSION"><a href="#CONCLUSION" class="headerlink" title="CONCLUSION"></a>CONCLUSION</h1><p>感觉没什么特别的，总体框架和CycleGAN基本一致。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019&lt;/p&gt;
&lt;h1 id=&quot;CONTRIBUTIONS&quot;&gt;&lt;a href=&quot;#CONTRIBUTIONS&quot; class=&quot;headerlink&quot; title=&quot;CONTRIBUTIONS&quot;&gt;&lt;/a&gt;CONTRIBUTIONS&lt;/h1&gt;&lt;p&gt;1.这是第一个使用Cycle
      
    
    </summary>
    
      <category term="Thesis" scheme="http://yoursite.com/categories/Thesis/"/>
    
    
      <category term="Semi-Supervised" scheme="http://yoursite.com/tags/Semi-Supervised/"/>
    
      <category term="Adversarial Learning" scheme="http://yoursite.com/tags/Adversarial-Learning/"/>
    
      <category term="Semantic Segmentation" scheme="http://yoursite.com/tags/Semantic-Segmentation/"/>
    
  </entry>
  
  <entry>
    <title>Semi and Weakly Supervised Semantic Segmentation Using Generative Adversarial Network阅读笔记</title>
    <link href="http://yoursite.com/2019/10/05/Semi%20and%20Weakly%20Supervised%20Semantic%20Segmentation%20Using%20Generative%20Adversarial%20Network%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/10/05/Semi and Weakly Supervised Semantic Segmentation Using Generative Adversarial Network阅读笔记/</id>
    <published>2019-10-05T12:59:18.000Z</published>
    <updated>2019-10-13T01:36:26.721Z</updated>
    
    <content type="html"><![CDATA[<p><em>ICCV 2017</em></p><h1 id="CONTRIBUTIONS"><a href="#CONTRIBUTIONS" class="headerlink" title="CONTRIBUTIONS"></a>CONTRIBUTIONS</h1><p>1.提出了一个GAN网络框架——将传统GAN扩展为像素级预测。</p><p>2.使用半监督方式利用生成的数据和无标注数据来训练网络。</p><p>3.通过采用条件GAN和带有图像级别类标签的数据将方法扩展到弱监督学习上。</p><h1 id="DETAILS"><a href="#DETAILS" class="headerlink" title="DETAILS"></a>DETAILS</h1><p>1.提出了一个半监督框架，包括一个生成网络和判别网络，其中生成网络用于为判别网络提供另外的训练样本，判别网络类似于一个多类分类器，将生成网络生成的样本和真实样本进行分类，如果为生成样本则被分为假类（fake class），若为真实样本，则将其每个像素分为对应的类。（判别器输出k张图像，每张图像对应于一个类别的置信度。例如k=3，第一张图像的第一个像素点处的概率为0.3，即第一个像素属于第0类的概率为0.3，第二张图像的第一个像素点处的概率为0.2，第三章图像的第一个像素点处的概率为0.5，则输入图像第一个像素点属于第2类）。然后最后得到所有像素点属于的类别，即得到一张mask预测图。</p><p>2.使用GAN的基本思想是：加入大量伪造的数据数据迫使真实样本在特征空间中逼近（？？？不太懂，是说找到真实样本之间的相同特征吗），从而实现自下向上的聚类过程，改善多类像素的分类。</p><p>3.半监督的思想是从无标注数据中识别某个特定的隐藏结构p(x)，该结构可以促进带有y类标签的图像的分类。本文的目的是找到一个隐藏数据结构帮助语义分割。</p><p>4.弱标签包括bounding box和image-level labels。</p><p>5.作者发现GAN的使用既能学到隐藏的数据结构，又可以学习到空间物体分布（马路在图像最下面，天空在图像最上面等）。</p><p>6.实验结果发现相比半监督，弱监督的结果中false positives变少了，这是因为，而半监督中的false positives很多都是背景置信度太高导致的，而判别器提高了弱标注图像中出现的标签的置信度（加的图像类标签提高了该类对象的置信度）。</p><h1 id="ARCHITECTURE"><a href="#ARCHITECTURE" class="headerlink" title="ARCHITECTURE"></a>ARCHITECTURE</h1><p>1.生成器（具体的结构略）</p><p>2.判别器：像素分类，同时判别所给图像是来自训练数据（ground truth，包括未标注数据）还是生成数据。</p><h1 id="LOSS"><a href="#LOSS" class="headerlink" title="LOSS"></a>LOSS</h1><h2 id="半监督（使用像素级标签）"><a href="#半监督（使用像素级标签）" class="headerlink" title="半监督（使用像素级标签）"></a>半监督（使用像素级标签）</h2><h3 id="判别器Loss"><a href="#判别器Loss" class="headerlink" title="判别器Loss"></a>判别器Loss</h3><p><img src="/images/Semi-and-Weakly-Supervised-Semantic-Segmentation-Using-Generative-Adversarial-Network阅读笔记/unknown-0282472.png" alt="unknown.png" style="zoom:50%;"></p><p>P(y=fake|x)是指输入图像为生成图像的概率。</p><p>L_D的第一项：为无标注数据设计，目的是降低像素属于假类的概率（？？？没看懂）。</p><p>L_D的第二项：判别器对由标签数据的判别，将其每个像素进行分类，得到mask图后与标签y进行交叉熵。</p><p>L_D的第三项：提高判别器对真实样本和生成样本的判别能力。</p><h3 id="生成器Loss"><a href="#生成器Loss" class="headerlink" title="生成器Loss"></a>生成器Loss</h3><p><img src="/images/Semi-and-Weakly-Supervised-Semantic-Segmentation-Using-Generative-Adversarial-Network阅读笔记/image-20191005214452213.png" alt="image-20191005214452213" style="zoom:50%;"></p><p>同传统GAN。</p><h2 id="弱监督（使用图像级标签）"><a href="#弱监督（使用图像级标签）" class="headerlink" title="弱监督（使用图像级标签）"></a>弱监督（使用图像级标签）</h2><h3 id="判别器Loss（没怎么看懂-）"><a href="#判别器Loss（没怎么看懂-）" class="headerlink" title="判别器Loss（没怎么看懂 ）"></a>判别器Loss（没怎么看懂 ）</h3><p><img src="/images/Semi-and-Weakly-Supervised-Semantic-Segmentation-Using-Generative-Adversarial-Network阅读笔记/image-20191005214644933.png" alt="image-20191005214644933" style="zoom:50%;"></p><p>L_D的第一项：为带弱标注的图像设计</p><p>L_D的第二项：为生成的图像（带弱标注）设计</p><p>L_D的第三项：为带标注的图像设计，</p><p>判别器抑制生成图像属于true类的概率，而提高了弱标注图像中出现的标签的置信度。</p><h3 id="生成器Loss-1"><a href="#生成器Loss-1" class="headerlink" title="生成器Loss"></a>生成器Loss</h3><p>同半监督。</p><h1 id="SOME-QUESTIONS"><a href="#SOME-QUESTIONS" class="headerlink" title="SOME QUESTIONS"></a>SOME QUESTIONS</h1><p>1.做半监督训练时，有标注的图像中没有出现过对象o，但是未标注的图像中出现过。那么在做测试的时候，这个对象o是否会被分割出来？</p><p>2.究竟是怎么识别出那个隐藏数据结构的？生成图像和无标签图像究竟是怎么用的？两者有什么区别？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;ICCV 2017&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;CONTRIBUTIONS&quot;&gt;&lt;a href=&quot;#CONTRIBUTIONS&quot; class=&quot;headerlink&quot; title=&quot;CONTRIBUTIONS&quot;&gt;&lt;/a&gt;CONTRIBUTIONS&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="Thesis" scheme="http://yoursite.com/categories/Thesis/"/>
    
    
      <category term="Semi-Supervised" scheme="http://yoursite.com/tags/Semi-Supervised/"/>
    
      <category term="Weakly-Supervised" scheme="http://yoursite.com/tags/Weakly-Supervised/"/>
    
      <category term="Adversarial Learning" scheme="http://yoursite.com/tags/Adversarial-Learning/"/>
    
      <category term="Semantic Segmentation" scheme="http://yoursite.com/tags/Semantic-Segmentation/"/>
    
  </entry>
  
  <entry>
    <title>每周诗歌01</title>
    <link href="http://yoursite.com/2019/10/04/%E6%AF%8F%E5%91%A8%E8%AF%97%E6%AD%8C01/"/>
    <id>http://yoursite.com/2019/10/04/每周诗歌01/</id>
    <published>2019-10-04T11:04:10.000Z</published>
    <updated>2019-10-04T11:24:35.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="亲爱的小鱼"><a href="#亲爱的小鱼" class="headerlink" title="亲爱的小鱼"></a>亲爱的小鱼</h2><p>亲爱的小鱼，我好爱你，</p><p>我要喂你面包，你要快快长大，</p><p>每一天我都会亲亲你，我答应你，永远都不会忘记。</p><p>亲爱的小鱼，你越长越长，</p><p>总有一天，再也住不下小鱼缸。</p><p>我会带你到海边，让你自由。</p><p>尽管你是那么开心的离开。</p><p>亲爱的小鱼，我会想你的。</p><p>我会在白天一直等你，看你会不会游回来。</p><p>我也会在夜里继续等待，希望早点看见你回来。</p><p>看到你回来，我会是多么地开心。</p><p>我知道你也爱我，我让你自由，你却回来了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;亲爱的小鱼&quot;&gt;&lt;a href=&quot;#亲爱的小鱼&quot; class=&quot;headerlink&quot; title=&quot;亲爱的小鱼&quot;&gt;&lt;/a&gt;亲爱的小鱼&lt;/h2&gt;&lt;p&gt;亲爱的小鱼，我好爱你，&lt;/p&gt;
&lt;p&gt;我要喂你面包，你要快快长大，&lt;/p&gt;
&lt;p&gt;每一天我都会亲亲你，我答应你，永远
      
    
    </summary>
    
      <category term="Poem" scheme="http://yoursite.com/categories/Poem/"/>
    
    
  </entry>
  
  <entry>
    <title>Adversarial Learning for Semi-Supervised Semantic Segmentation阅读笔记</title>
    <link href="http://yoursite.com/2019/10/03/Adversarial%20Learning%20for%20Semi-Supervised%20Semantic%20Segmentation%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/10/03/Adversarial Learning for Semi-Supervised Semantic Segmentation阅读笔记/</id>
    <published>2019-10-03T03:45:23.000Z</published>
    <updated>2019-10-05T13:08:35.563Z</updated>
    
    <content type="html"><![CDATA[<p><em>BMVC 2018</em></p><h1 id="CONTRIBUTIONS"><a href="#CONTRIBUTIONS" class="headerlink" title="CONTRIBUTIONS"></a>CONTRIBUTIONS</h1><p>1.提出了一个对抗框架，提高了分割精度却未增加推断时的计算量。</p><p>2.提出一个半监督框架，证明了可以使用未标注数据提高分割精度。</p><p>3.通过利用判别器发现未标注图像的可靠区域（判别器的输出），从而促进半监督学习。</p><h1 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h1><p>1.通过将Ladv和Lce结合来提高分割精度。</p><p>2.全卷积判别器可通过在无标注数据的分割图像上发现可靠区域，将其当做ground truth辅助分割，从而提高其他的监督信号。</p><p>3.使用了两个半监督loss项（Lsem和Ladv）来利用无标注：先用置信图作为监督信号，以自学方式指导Lce(置信图表明了预测分布图中趋于ground truth的分布，即所谓的可靠区域)；使用无标注数据上的Ladv（同有监督中的Ladv），使得无监督数据的分割结果向ground truth靠近。</p><p>4.仅用标注数据训练判别网络。</p><h1 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h1><h3 id="分割网络"><a href="#分割网络" class="headerlink" title="分割网络"></a>分割网络</h3><p>采用了带有预训练好的ResNet-101的DeepLab-v2框架。</p><p>输入：图像 (H, W, C)</p><p>输出：class probability map (H, W, C)</p><h3 id="判别网络"><a href="#判别网络" class="headerlink" title="判别网络"></a>判别网络</h3><p>-输入：class probability map</p><p>（来自分割网络/one-hot编码后的ground truth）</p><p>-输出：confidence map (H, W, 1)</p><h1 id="Training-Processing"><a href="#Training-Processing" class="headerlink" title="Training Processing"></a>Training Processing</h1><p>使用标注数据时，分割网络由Lce和Ladv同时监督，判别网络仅使用标注数据训练。</p><p>使用无标注数据时，用半监督方式训练分割网络。在获得分割预测后，将其作为判别网络的输入，输出一个置信图，将该置信图作为监督信号，使用自学机制来训练带有masked交叉熵（Lsemi）的分割网络。</p><h1 id="Loss-Function"><a href="#Loss-Function" class="headerlink" title="Loss Function"></a>Loss Function</h1><h3 id="判别器的Loss"><a href="#判别器的Loss" class="headerlink" title="判别器的Loss"></a>判别器的Loss</h3><p><img src="/images/Adversarial-Learning-for-Semi-Supervised-Semantic-Segmentation阅读笔记/unknown.png" alt="unknown.png" style="zoom:50%;"></p><h3 id="分割器的Loss"><a href="#分割器的Loss" class="headerlink" title="分割器的Loss"></a>分割器的Loss</h3><p><img src="/images/Adversarial-Learning-for-Semi-Supervised-Semantic-Segmentation阅读笔记/unknown-0150599.png" alt="unknown.png" style="zoom:50%;"></p><p><img src="/images/Adversarial-Learning-for-Semi-Supervised-Semantic-Segmentation阅读笔记/unknown-0150642.png" alt="unknown.png" style="zoom:50%;"></p><p><img src="/images/Adversarial-Learning-for-Semi-Supervised-Semantic-Segmentation阅读笔记/unknown-0150645.png" alt="unknown.png" style="zoom:50%;"></p><p><img src="/images/Adversarial-Learning-for-Semi-Supervised-Semantic-Segmentation阅读笔记/unknown-0150659.png" alt="unknown.png" style="zoom:50%;"></p><p>Lsemi中的I(·)为指示函数，用于将D(S(X_n))结果二值化，当D(S(X_n)) &gt; T_semi时，函数取1，否则取0。</p><h1 id="Some-Questions"><a href="#Some-Questions" class="headerlink" title="Some Questions"></a>Some Questions</h1><p>1.spatial probability map和confidence map一样吗，前者好像是0/1组成的，后者好像是概率值，然后经过二值化变成了0/1？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;BMVC 2018&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;CONTRIBUTIONS&quot;&gt;&lt;a href=&quot;#CONTRIBUTIONS&quot; class=&quot;headerlink&quot; title=&quot;CONTRIBUTIONS&quot;&gt;&lt;/a&gt;CONTRIBUTIONS&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="Thesis" scheme="http://yoursite.com/categories/Thesis/"/>
    
    
      <category term="Semi-Supervised" scheme="http://yoursite.com/tags/Semi-Supervised/"/>
    
      <category term="Adversarial Learning" scheme="http://yoursite.com/tags/Adversarial-Learning/"/>
    
      <category term="Semantic Segmentation" scheme="http://yoursite.com/tags/Semantic-Segmentation/"/>
    
  </entry>
  
  <entry>
    <title>mac电脑下如何给终端设置代理</title>
    <link href="http://yoursite.com/2019/10/02/mac%E7%94%B5%E8%84%91%E4%B8%8B%E5%A6%82%E4%BD%95%E7%BB%99%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2019/10/02/mac电脑下如何给终端设置代理/</id>
    <published>2019-10-02T08:34:46.000Z</published>
    <updated>2019-10-13T00:39:24.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Shadowsocks的运行原理"><a href="#Shadowsocks的运行原理" class="headerlink" title="Shadowsocks的运行原理"></a>Shadowsocks的运行原理</h2><p>在服务器端部署完成后，用户根据指定的密码、加密方式、端口等与服务器连接。成功连接之后，客户端会在用户电脑上构建一个本地的Socks5代理。浏览网络时，网络流量会被分到本地Socks5代理，客户端将其加密后发送到服务器，服务器以同样的加密方式将流量回传给客户端，从而实现代理上网。</p><p>Shadowsocks默认在1080端口开启Socks5代理，同时兼容了HTTP代理。</p><p>一些浏览器和软件只支持HTTP代理，而不支持Socks代理，正式因为Shadowsocks同时支持了HTTP代理才能对这些软件进行代理。</p><p>浏览器一般自动启动系统代理，而其他软件则需要自身支持HTTP代理或Socks5代理，并且一般需要手动配置。</p><h2 id="全局模式和PAC模式的区别"><a href="#全局模式和PAC模式的区别" class="headerlink" title="全局模式和PAC模式的区别"></a>全局模式和PAC模式的区别</h2><p>简单来说在全局模式下，所有网站默认走代理，而PAC模式只有被墙的网站才会走代理。</p><h2 id="mac下如何给终端设置代理"><a href="#mac下如何给终端设置代理" class="headerlink" title="mac下如何给终端设置代理"></a>mac下如何给终端设置代理</h2><p>查看代理运行的端口，一般在1086端口</p><p><img src="/images/mac电脑下如何设置代理/image-20191002164842126.png" alt="image-20191002164842126" style="zoom:50%;"></p><p>在~/.zshrc中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias proxy=&quot;export ALL_PROXY=socks5://127.0.0.1:1086&quot;</span><br><span class="line">alias unproxy=&quot;unset ALL_PROXY&quot;</span><br></pre></td></tr></table></figure><p>然后source ~/.zshrc</p><p>用以下命令查看当前的ip所在地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://ip.cn</span><br></pre></td></tr></table></figure><p><img src="/images/mac电脑下如何给终端设置代理/image-20191002165231116.png" alt="image-20191002165231116"></p><p>再执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy</span><br></pre></td></tr></table></figure><p><img src="/images/mac电脑下如何给终端设置代理/image-20191002165323387.png" alt="image-20191002165323387"></p><p>ip切换到美国</p><p>再执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unproxy</span><br></pre></td></tr></table></figure><p><img src="/images/mac电脑下如何给终端设置代理/image-20191002165231116.png" alt="image-20191002165231116"></p><p>地址又回来了。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="一些常用的查询公网出口IP的命令"><a href="#一些常用的查询公网出口IP的命令" class="headerlink" title="一些常用的查询公网出口IP的命令"></a>一些常用的查询公网出口IP的命令</h3><p><em>curl ipinfo.io</em></p><p><em>curl <a href="https://ip.cn" target="_blank" rel="noopener">https://ip.cn</a></em></p><p><em>curl cip.cc</em></p><p><em>curl myip.ipip.net</em></p><p>等等</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1.<a href="https://vimcaw.github.io/blog/2017/08/13/ShadowsocksR%E4%BB%A3%E7%90%86%E6%96%B9%E5%BC%8F/(https://vimcaw.github.io/blog/2017/08/13/ShadowsocksR代理方式/)" target="_blank" rel="noopener">Shadowsocks代理方式</a></p><p>2.[<a href="https://doubibackup.com/4e-hd3iu-2.html" target="_blank" rel="noopener">Shadowsocks（Sock5代理）的PAC模式与全局模式与VPN的区别</a><a href="https://doubibackup.com/4e-hd3iu-2.html" target="_blank" rel="noopener">link2</a></p><p>3.[OS X 设置终端使用Socks5][link3]</p><p>4.<a href="https://blog.csdn.net/soslinken/article/details/79025939" target="_blank" rel="noopener">[命令行] curl查询公网出口IP</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Shadowsocks的运行原理&quot;&gt;&lt;a href=&quot;#Shadowsocks的运行原理&quot; class=&quot;headerlink&quot; title=&quot;Shadowsocks的运行原理&quot;&gt;&lt;/a&gt;Shadowsocks的运行原理&lt;/h2&gt;&lt;p&gt;在服务器端部署完成后，用户根
      
    
    </summary>
    
      <category term="Solutions" scheme="http://yoursite.com/categories/Solutions/"/>
    
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
      <category term="Proxy" scheme="http://yoursite.com/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>hexo在部署时候卡住的原因及解决方案</title>
    <link href="http://yoursite.com/2019/10/02/hexo%E5%9C%A8%E9%83%A8%E7%BD%B2%E6%97%B6%E5%80%99%E5%8D%A1%E4%BD%8F%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2019/10/02/hexo在部署时候卡住的原因及解决方案/</id>
    <published>2019-10-02T08:10:09.000Z</published>
    <updated>2019-10-13T00:36:02.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>今天用hexo d命令进行部署的时候发现卡了很久一直不能进行。后来发现是因为用了另一个代理的原因。这个代理在1080端口支持的是http代理，而我在_conf.yml设置中用的是ssh地址。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>打开_conf.yml，将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository:git@github.com:chida15/chida15.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>修改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/Chida15/chida15.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h2><p>1.http代理和socks代理的区别？</p><p>http代理是基于http协议的代理，一般用于网页，端口通常为80、3128、8080。而socks代理是基于socks协议的一种代理，也叫做全能代理，支持多种协议，包括http、ftp以及其他类型的请求，端口通常为1080.</p><p>2.为什么shadowsocks使用的是http代理，而不是socks代理呢？</p><p>shawdowsocks默认在1080端口开启socks代理，且兼容了http代理，因为一些软件和浏览器不支持socks代理，但支持http代理，所以后者用的比较多。</p><p>具体的可以参考我的另一个博客：<a href="../mac电脑下如何给终端设置代理">mac电脑下如何设置代理</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1.<a href="http://duanyifu.com/2016/08/23/hexo-deploy-problem/" target="_blank" rel="noopener">hexo deploy 命令卡住的奇怪问题</a></p><p>2.<a href="https://blog.csdn.net/cdwlkj10/article/details/83586800" target="_blank" rel="noopener">HTTP代理和Socks代理有什么区别</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;今天用hexo d命令进行部署的时候发现卡了很久一直不能进行。后来发现是因为用了另一个代理的原因。这个代理在1080端口支持
      
    
    </summary>
    
      <category term="Solutions" scheme="http://yoursite.com/categories/Solutions/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>mac下安装dosbox</title>
    <link href="http://yoursite.com/2019/10/02/mac%E4%B8%8B%E5%AE%89%E8%A3%85dosbox/"/>
    <id>http://yoursite.com/2019/10/02/mac下安装dosbox/</id>
    <published>2019-10-02T02:37:54.000Z</published>
    <updated>2019-10-15T02:27:09.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何安装dosbox"><a href="#如何安装dosbox" class="headerlink" title="如何安装dosbox"></a>如何安装dosbox</h2><h3 id="dosbox下载"><a href="#dosbox下载" class="headerlink" title="dosbox下载"></a><a href="https://www.dosbox.com/" target="_blank" rel="noopener">dosbox下载</a></h3><h3 id="汇编开发工具下载"><a href="#汇编开发工具下载" class="headerlink" title="汇编开发工具下载"></a><a href="https://download.csdn.net/download/xiaomuchong2016/10133013" target="_blank" rel="noopener">汇编开发工具下载</a></h3><h3 id="创建一个工作目录"><a href="#创建一个工作目录" class="headerlink" title="创建一个工作目录"></a>创建一个工作目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir Assembly // 我是在~/MyAcademic/文件夹下创建的</span><br></pre></td></tr></table></figure><h3 id="将下载的汇编开发工具移动到该文件夹中"><a href="#将下载的汇编开发工具移动到该文件夹中" class="headerlink" title="将下载的汇编开发工具移动到该文件夹中"></a>将下载的汇编开发工具移动到该文件夹中</h3><p><img src="/images/mac下安装dosbox/image-20191002105139336.png" alt="image-20191002105139336" style="zoom: 50%;"></p><h3 id="打开dosbox，输入："><a href="#打开dosbox，输入：" class="headerlink" title="打开dosbox，输入："></a>打开dosbox，输入：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount c ~/myFiles/MyAcademic/Assembly</span><br><span class="line">c:</span><br></pre></td></tr></table></figure><h3 id="即可进入创建的文件夹中"><a href="#即可进入创建的文件夹中" class="headerlink" title="即可进入创建的文件夹中"></a>即可进入创建的文件夹中</h3><h3 id="输入debug，运行debug程序"><a href="#输入debug，运行debug程序" class="headerlink" title="输入debug，运行debug程序"></a>输入debug，运行debug程序</h3><p><img src="/images/mac下安装dosbox/image-20191002105617639.png" alt="image-20191002105617639" style="zoom:50%;"></p><p><em>输入q退出debug</em></p><h2 id="dosbox的一些设置"><a href="#dosbox的一些设置" class="headerlink" title="dosbox的一些设置"></a>dosbox的一些设置</h2><p><em>mac下dosbox的设置文件在~/Library/Preferences/DOSBox 0.74-3 Preferences</em></p><h3 id="（1）自动挂载"><a href="#（1）自动挂载" class="headerlink" title="（1）自动挂载"></a>（1）自动挂载</h3><h4 id="在设置文件中加入"><a href="#在设置文件中加入" class="headerlink" title="在设置文件中加入"></a>在设置文件中加入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount c ~/myFiles/MyAcademic/Assembly // 后面是前面创建的放编译、链接工具的文件夹</span><br></pre></td></tr></table></figure><h3 id="（2）改变分辨率"><a href="#（2）改变分辨率" class="headerlink" title="（2）改变分辨率"></a>（2）改变分辨率</h3><h4 id="在设置文件中加入-1"><a href="#在设置文件中加入-1" class="headerlink" title="在设置文件中加入"></a>在设置文件中加入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[sdl]</span><br><span class="line">fullscreen=false</span><br><span class="line">fulldouble=false</span><br><span class="line">fullresolution=original</span><br><span class="line">windowresolution=1024x640 // 可以通过更改这里的分辨率调整大小</span><br><span class="line">output=opengl</span><br><span class="line">autolock=true</span><br><span class="line">sensitivity=100</span><br><span class="line">waitοnerrοr=true</span><br><span class="line">priority=higher,normal</span><br><span class="line">mapperfile=mapper-0.74.map</span><br><span class="line">usescancodes=true</span><br><span class="line"></span><br><span class="line">[render]</span><br><span class="line"></span><br><span class="line">frameskip=0</span><br><span class="line">aspect=false</span><br><span class="line">scaler=normal2x</span><br></pre></td></tr></table></figure><p><em>注意：将自动挂载设置卸载改变分辨率设置前面，否则会出错。</em></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1.<a href="https://www.jianshu.com/p/d762644e076b" target="_blank" rel="noopener">https://www.jianshu.com/p/d762644e076b</a></p><p>2.<a href="https://blog.csdn.net/My__Code/article/details/79734754" target="_blank" rel="noopener">https://blog.csdn.net/My__Code/article/details/79734754</a></p><p>3.<a href="https://blog.csdn.net/lvdan1/article/details/72675340" target="_blank" rel="noopener">https://blog.csdn.net/lvdan1/article/details/72675340</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何安装dosbox&quot;&gt;&lt;a href=&quot;#如何安装dosbox&quot; class=&quot;headerlink&quot; title=&quot;如何安装dosbox&quot;&gt;&lt;/a&gt;如何安装dosbox&lt;/h2&gt;&lt;h3 id=&quot;dosbox下载&quot;&gt;&lt;a href=&quot;#dosbox下载&quot; cla
      
    
    </summary>
    
      <category term="Solutions" scheme="http://yoursite.com/categories/Solutions/"/>
    
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
      <category term="Assembly Language" scheme="http://yoursite.com/tags/Assembly-Language/"/>
    
  </entry>
  
  <entry>
    <title>自顶向下方法第一章笔记</title>
    <link href="http://yoursite.com/2019/09/30/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/09/30/自顶向下方法第一章笔记/</id>
    <published>2019-09-30T11:26:07.000Z</published>
    <updated>2019-10-05T07:47:29.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="何为因特网"><a href="#何为因特网" class="headerlink" title="何为因特网"></a>何为因特网</h1><h2 id="具体构成"><a href="#具体构成" class="headerlink" title="具体构成"></a>具体构成</h2><h3 id="通信链路"><a href="#通信链路" class="headerlink" title="通信链路"></a>通信链路</h3><p>由不同的物理媒体组成，如铜线（copper wire）、光纤（optical fiber）、同轴电缆（coaxial cable）和无线电频谱（radio spectrum）等。</p><h3 id="分组交换机"><a href="#分组交换机" class="headerlink" title="分组交换机"></a>分组交换机</h3><p>最重要的两个分组交换机是路由器和链路层交换机，前者常用于网络核心中，后者常用于接入网中。</p><h3 id="ISP（Internet-Service-Provider）"><a href="#ISP（Internet-Service-Provider）" class="headerlink" title="ISP（Internet Service Provider）"></a>ISP（Internet Service Provider）</h3><p>由多个分组交换机和链路组成的网络</p><p><em>路由器和交换机的区别：</em></p><p><em>前者是网络层的分组交换机，后者是链路层的分组交换机；前者使用网络层IP地址转发分组，后者使用MAC地址转发分组；前者常用于网络核心部分，后者常用于接入网。</em></p><h2 id="服务角度（因特网的基础设施）"><a href="#服务角度（因特网的基础设施）" class="headerlink" title="服务角度（因特网的基础设施）"></a>服务角度（因特网的基础设施）</h2><h3 id="socket-interface"><a href="#socket-interface" class="headerlink" title="socket interface"></a>socket interface</h3><p>TCP/IP网络的应用程序编程接口（Application Programming Interface，API），它定义了很多函数或者例程，程序员可以用他们来开发TCP/IP网络上的应用程序。</p><h2 id="什么是协议"><a href="#什么是协议" class="headerlink" title="什么是协议"></a>什么是协议</h2><p>协议定义了通信实体（两个或多个）之间交换消息的格式和顺序。</p><p>协议既可以是硬件也可以是软件。</p><p>协议存在于计算机、路由器、平板或其他可联网设备上。</p><h1 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h1><h2 id="接入网"><a href="#接入网" class="headerlink" title="接入网"></a>接入网</h2><p><img src="/images/自顶向下方法第一章笔记/image-20190930211753647.png" alt="image-20190930211753647"></p><h2 id="物理媒体"><a href="#物理媒体" class="headerlink" title="物理媒体"></a>物理媒体</h2><p><img src="/images/自顶向下方法第一章笔记/image-20190930213012661.png" alt="image-20190930213012661"></p><h1 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h1><h2 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h2><p>为了向目标端系统发送信息，源端系统将长报文分成多个分组，每个分组通过通信链路和多个分组交换机最终到达目标端系统。</p><h3 id="存储转发（store-and-forward-transmission）"><a href="#存储转发（store-and-forward-transmission）" class="headerlink" title="存储转发（store-and-forward transmission）"></a>存储转发（store-and-forward transmission）</h3><p>存储转发是指分组转换器在将分组的第一个比特转发之前，必须接收全部的分组。</p><h3 id="排队延时和分组丢失（Queuing-Delays-and-Packet-Loss）"><a href="#排队延时和分组丢失（Queuing-Delays-and-Packet-Loss）" class="headerlink" title="排队延时和分组丢失（Queuing Delays and Packet Loss）"></a>排队延时和分组丢失（Queuing Delays and Packet Loss）</h3><p>每个分组交换器都有一个输出缓存（输出队列）。当到达的分组需要传输到某个链路，而该链路正在传输其他分组（不同分组不能使用同一链路，同一分组的不同bit可以使用同一链路）时，该到达分组必须在输出缓存中等待。若缓存已满，则需要丢弃到达分组或排队分组。</p><h3 id="转发表和路由选择协议（Forwarding-Tables-and-Routing-Protocols）"><a href="#转发表和路由选择协议（Forwarding-Tables-and-Routing-Protocols）" class="headerlink" title="转发表和路由选择协议（Forwarding Tables and Routing Protocols）"></a>转发表和路由选择协议（Forwarding Tables and Routing Protocols）</h3><p>每个路由器中有一个转发表，其中将目标地址映射成路由器输出链路。每个分组的头部中包含了目标端系统的IP地址，当分组到达一个路由器时，该路由器检查分组的目标地址的一部分，然后搜索其转发表找到合适的输出链路。</p><p>路由选择协议用于自动设置转发表，它可以决定从一个路由器到目标地址的最短路径，并使用这些最短路径来配置路由器中的转发表。</p><h2 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h2><p><em>传统的电话网络是一种电路交换网络</em>。</p><p><em>电路交换在通信期间链路一直保留，且预留了带宽，因此链路的传输速率始终不变</em>。</p><p>在下图的电路交换网络中，4条链路将4个电路交换机相互连接。每天链路包含四条电路，因此每条链路可同时支持4条并行连接。当两台主机要进行通信时，网络在两台主机之间建立了一条专用的端到端连接。</p><p><em>因为每条链路有4条电路，该连接在连接期间获得链路宽带的1/4，比如每条链路具有1Mbps传输速率，则每个端到端电路交换连接获得250kbps专用的传输速率。</em></p><p><img src="/images/自顶向下方法第一章笔记/page55image65404928.png" alt="page55image65404928.png"></p><h3 id="电路交换中的复用技术"><a href="#电路交换中的复用技术" class="headerlink" title="电路交换中的复用技术"></a>电路交换中的复用技术</h3><h4 id="频分复用"><a href="#频分复用" class="headerlink" title="频分复用"></a>频分复用</h4><p>频域被划分成n份，每个电路的带宽为1/nkHZ</p><h4 id="时分复用"><a href="#时分复用" class="headerlink" title="时分复用"></a>时分复用</h4><p>时间划分为帧（frame），帧划分为时隙（time slot）</p><p><img src="/images/自顶向下方法第一章笔记/image-20191003221901587.png" alt="image-20191003221901587" style="zoom:50%;"></p><p><em>注意：</em></p><p><em>频分复用和时分复用都分割了带宽，但是频分复用是连续得到部分带宽，时分复用是周期性得到所有带宽。</em></p><p><em>扩展：</em></p><p><em>分组交换网络中的多路复用技术是“统计多路复用”/“异步时分多路复用，它与时分复用类似，但它的时间片是根据用户实际需要动态分配的。”</em></p><h1 id="分组交换中的时延、丢包和吞吐量"><a href="#分组交换中的时延、丢包和吞吐量" class="headerlink" title="分组交换中的时延、丢包和吞吐量"></a>分组交换中的时延、丢包和吞吐量</h1><h2 id="分组交换网络中的时延概述"><a href="#分组交换网络中的时延概述" class="headerlink" title="分组交换网络中的时延概述"></a>分组交换网络中的时延概述</h2><h3 id="时延的类型"><a href="#时延的类型" class="headerlink" title="时延的类型"></a>时延的类型</h3><p>时延包括结点处理时延、排队时延、传输时延（transmission delay）和传播时延（propagation delay）</p><p><em>注意：</em></p><p><em>传输时延是分组所有比特从离开路由器所用的时间；而传播时延是分组的某个比特在链路上所用的时间。当传输时延</em> &gt; 传播时延时，第一个分组比特已经到达下一结点，而最后一个分组比特还未离开当前结点。</p><p>结点处理时延包括处理分组首部和决定其去向，还包括处理分组中比特级差错。</p><h2 id="排队时延和丢包"><a href="#排队时延和丢包" class="headerlink" title="排队时延和丢包"></a>排队时延和丢包</h2><p>流量强度=L*a / R</p><p>L：每个分组包含比特数</p><p>a：分组到达队列的平均速率</p><p>R：传输速率</p><p>L * a：比特到达队列的平均速率</p><p>流量强度用于评估排队时延的程度，如果流量程度大于1，则比特到达队列的平均速度超出了比特的传输速率，因此队列会增长，排队时延会增加。</p><p>考虑流量强度小于1的情况，此时到达流量的性质将会影响排队时延。如果分组是周期性到达，即每L/Rs到达一个分组，则每个分组到达时队列均为空，没有排队时延；但如果分组是突发式到达，如一次性到达N个分组，则第一个分组的排队时延为0，第二个分组的排队时延为L/Rs,第N个分组排队时延为(N-1)/R。</p><p><img src="/images/自顶向下方法第一章笔记/image-20191005104921920.png" alt="image-20191005104921920" style="zoom:50%;"></p><p>丢失分组的份额随着流量强度的增加而增加。</p><p>因此一个结点的性能不仅根据时延度量，还根据丢包率来度量。</p><h2 id="端到端时延"><a href="#端到端时延" class="headerlink" title="端到端时延"></a>端到端时延</h2><p>假设源主机和目的主机之间有N-1个路由器（假设排队时延忽略不计），则端到端时延如下</p><p>dend-end = N(dproc + dtrans + dprop)</p><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><p>瞬时吞吐量：主机接收文件的实时速率bps</p><p>平均吞吐量：总文件大小/总接收时间</p><p>吞吐量 = 瓶颈链路的传输速率 = min{R1, R2, …,Rn}</p><p>其中R1…Rn为源主机/目的主机/路由器与路由器之间的传输速率。</p><p>吞吐量不仅取决于传输速率，还取决于干扰流量。</p><p>假设网络核心中的链路传输速率为R=5Mbps，服务器接入网速率为Rs=2Mbps，客户机接入网速率为Rc=1Mbps。</p><p>当只有一个网络中客户机-服务器对时，</p><p><img src="/images/自顶向下方法第一章笔记/image-20191005112847233.png" alt="image-20191005112847233" style="zoom:50%;"></p><p>吞吐量=min{R, Rs, Rc} = 1Mbps</p><p>（瓶颈链路为客户机接入网）</p><p>当有10个网络客户机-服务器对时，</p><p><img src="/images/自顶向下方法第一章笔记/image-20191005113129240.png" alt="image-20191005113129240" style="zoom:50%;"></p><p>每条链路的传输速率=5Mbps  / 10 = 500kbps</p><p>吞吐量=min{R, Rs, Rc} = 500kbps</p><p>当没有其他干扰流量时，吞吐量可以简单定义为min{Rs, Rc}（一般情况下R远大于Rs和Rc）</p><p><em>传输速率、带宽和吞吐量辨析</em></p><p><em>带宽是最大传输速率，吞吐量是实际传输速率。</em></p><p><em>日常生活中ISP中说的带宽其实是以bit计，而我们下载时候显示的下载速率是以字节计</em></p><h1 id="协议层次及其服务模型"><a href="#协议层次及其服务模型" class="headerlink" title="协议层次及其服务模型"></a>协议层次及其服务模型</h1><h2 id="层次结构"><a href="#层次结构" class="headerlink" title="层次结构"></a>层次结构</h2><p><em>改变服务的实现与改变服务本身不同，改变服务本身并不会影响其上层服务，而改变服务的实现则改变了服务的调用接口，就必须改变上层服务对本层服务的调用方式。</em></p><h2 id="协议分层"><a href="#协议分层" class="headerlink" title="协议分层"></a>协议分层</h2><p>协议层次可以用软件、硬件或二者结合实现。诸如HTTP和SMTP的应用层协议在端系统中采用软件实现，运输层协议也是如此。物理层和数据链路层协议负责处理特定链路上的通信，通常是在与给定链路相联系的网络接口卡中实现。而网络层经常是硬件和软件实现的混合体。</p><p>n层协议的不同部分常常分布于端系统、分组交换机和其他组件中。</p><p>因特网的协议栈为五层：物理层、链路层、网络层、运输层和应用层。</p><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>应用层是网络应用和其协议所处的层。</p><p>功能：与另一台主机上的应用交换分组信息，实现主机应用之间的通信。</p><p>协议：常见的因特网应用层包括很多协议，比如HTTP协议、SMTP协议、FTP协议和DNS。</p><p><mark>应用层的分组称为报文（message）</mark></p><h3 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h3><p>功能：运输层在应用程序端点之间传送应用层的报文。</p><p>协议：TCP和UDP。</p><p><em>TCP为其应用提供面向连接服务。这种服务包括了应用层报文发往目的主机的可靠传输和流量控制。同时TCP还将长报文划分成短报文，并提供拥塞控制机制（当网络拥塞时，源主机控制其传输速率）</em></p><p><em>UDP提供向其应用提供无连接服务。它不提供可靠性，没有流量控制，也没有拥塞控制。</em></p><p><mark>运输层的分组称为报文段（segment）</mark></p><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>功能：将数据报从一台主机移动到另一台主机。</p><p>协议：IP协议（定义了数据报中的各个字段以及端系统和路由器如何作用于这些字段）、路由交换协议。</p><p><em>所有具有网络层的因特网组件都必须运行IP协议。</em></p><p><mark>网络层的分组称为数据报（datagram）</mark></p><h3 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h3><p>功能：将分组从一个结点（主机或路由器）移动到路径的下一个结点。</p><p>协议：链路层的提供的服务取决于应用于该链路的特定的链路层协议。以太网、WiFi和电缆接入网的DOCSIS协议。由于分组在传送过程中可能经过多种链路，所以数据报可能被烟台不同链路上的不同链路层协议处理。因此网络层将受到来自每个不同链路层协议的不同服务。</p><p><mark>链路层的分组称为帧（frame）</mark></p><h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>功能：将帧中的一个比特从一个结点移动到下一个结点。</p><p>协议：物理层的协议也是链路相关的，尤其是链路的实际传输媒体。例如。以太网有很多物理层协议：一个是关于双绞铜线的，一个是关于同轴电缆的，一个是关于光纤的。</p><h3 id="OSI模型"><a href="#OSI模型" class="headerlink" title="OSI模型"></a>OSI模型</h3><p>OSI参考模型有七层：应用层，表示层，会话层，传输层，网络层，数据链路层和物理层。</p><p>其中表示层的功能是能使通信应用解释交换数据含义。包括数据压缩和数据加密以及数据描述。会话层提供了数据交换定界和同步功能。</p><h3 id="分层的优缺点"><a href="#分层的优缺点" class="headerlink" title="分层的优缺点"></a>分层的优缺点</h3><h4 id="分层的优点"><a href="#分层的优点" class="headerlink" title="分层的优点"></a>分层的优点</h4><p>每层提供的服务易于改变，只需要它为上层提供相同服务，使用来自下层的相同服务。</p><h4 id="分层的缺点"><a href="#分层的缺点" class="headerlink" title="分层的缺点"></a>分层的缺点</h4><p>1.一层可能冗余较低层的功能。比如许多协议栈在基于每段链路和基于端到端两种情况都提供了提供了差错恢复功能。</p><p>2.某层的功能可能需要其他层才出现的信息，这违反了层次分离的目的。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p><img src="/images/自顶向下方法第一章笔记/image-20191005153548870.png" alt="image-20191005153548870" style="zoom:50%;"></p><p>端系统实现了全部的协议层，分组交换及（链路交换机和路由器）没有实现协议栈里的全部协议层，通常只实现底部协议层。这一点与因特网体系结构将它的复杂性放在网络边缘的观点是一样的。</p><p>封装的过程：在发送主机端，一个应用层报文被传送给传输层。在最简单的情况下，运输层收取报文并附上附加信息（运输层首部信息），该首部将被接收端的运输层使用。应用层报文和运输层首部信息组成了运输层报文段。然后运输层将报文段送入网络层，在网络层中加入了如源和目的主机的地址等网络层首部信息，产生了网络层数据报。数据包被传递给链路层，链路层增加它自己的首部信息并创建链路层帧。因此，在每一层，分组都有两种字段：首部字段和有效载荷字段（payload field，来自上一层的分组）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;何为因特网&quot;&gt;&lt;a href=&quot;#何为因特网&quot; class=&quot;headerlink&quot; title=&quot;何为因特网&quot;&gt;&lt;/a&gt;何为因特网&lt;/h1&gt;&lt;h2 id=&quot;具体构成&quot;&gt;&lt;a href=&quot;#具体构成&quot; class=&quot;headerlink&quot; title=&quot;具体构成&quot;
      
    
    </summary>
    
      <category term="Subjects" scheme="http://yoursite.com/categories/Subjects/"/>
    
    
      <category term="Computer Networking" scheme="http://yoursite.com/tags/Computer-Networking/"/>
    
  </entry>
  
  <entry>
    <title>如何给hexo博文加密</title>
    <link href="http://yoursite.com/2019/09/30/%E5%A6%82%E4%BD%95%E7%BB%99hexo%E5%8D%9A%E6%96%87%E5%8A%A0%E5%AF%86/"/>
    <id>http://yoursite.com/2019/09/30/如何给hexo博文加密/</id>
    <published>2019-09-30T02:40:54.000Z</published>
    <updated>2019-09-30T14:16:42.057Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装hexo插件"><a href="#安装hexo插件" class="headerlink" title="安装hexo插件"></a>安装hexo插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure><h3 id="对博客主目录下的-config-yml文件进行如下修改"><a href="#对博客主目录下的-config-yml文件进行如下修改" class="headerlink" title="对博客主目录下的_config.yml文件进行如下修改"></a>对博客主目录下的_config.yml文件进行如下修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">enable: true</span><br></pre></td></tr></table></figure><h3 id="在需要加密的博客的文件头中加入如下字段："><a href="#在需要加密的博客的文件头中加入如下字段：" class="headerlink" title="在需要加密的博客的文件头中加入如下字段："></a>在需要加密的博客的文件头中加入如下字段：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 如何给hexo博文加密</span><br><span class="line">date: 2019-09-30 10:40:54</span><br><span class="line">password: 密码</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装hexo插件&quot;&gt;&lt;a href=&quot;#安装hexo插件&quot; class=&quot;headerlink&quot; title=&quot;安装hexo插件&quot;&gt;&lt;/a&gt;安装hexo插件&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="Solutions" scheme="http://yoursite.com/categories/Solutions/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>如何在hexo中添加图片（typora）</title>
    <link href="http://yoursite.com/2019/09/29/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%EF%BC%88typora%EF%BC%89/"/>
    <id>http://yoursite.com/2019/09/29/如何在hexo中添加图片（typora）/</id>
    <published>2019-09-29T12:22:02.000Z</published>
    <updated>2019-09-30T14:16:50.188Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关设置"><a href="#相关设置" class="headerlink" title="相关设置"></a>相关设置</h3><h4 id="在Mac下进入Typora的Preferences中"><a href="#在Mac下进入Typora的Preferences中" class="headerlink" title="在Mac下进入Typora的Preferences中"></a>在Mac下进入Typora的Preferences中</h4><p><img src="/images/如何在hexo中添加图片（typora）/image-20190929214836639.png" alt="image-20190929214836639" style="zoom:50%;"></p><h4 id="点击image选择自定义设置，即可将粘贴在typora的图片自动存放到hexo博文对应的文件夹中"><a href="#点击image选择自定义设置，即可将粘贴在typora的图片自动存放到hexo博文对应的文件夹中" class="headerlink" title="点击image选择自定义设置，即可将粘贴在typora的图片自动存放到hexo博文对应的文件夹中"></a>点击image选择自定义设置，即可将粘贴在typora的图片自动存放到hexo博文对应的文件夹中</h4><p><img src="/images/如何在hexo中添加图片（typora）/image-20190929214902748.png" alt="image-20190929214902748" style="zoom:50%;"></p><h4 id="设置图片保存的相对地址为：-source（相对source文件夹的相对地址）"><a href="#设置图片保存的相对地址为：-source（相对source文件夹的相对地址）" class="headerlink" title="设置图片保存的相对地址为：../../../../source（相对source文件夹的相对地址）"></a>设置图片保存的相对地址为：../../../../source（相对source文件夹的相对地址）</h4><h3 id="修改图片的根目录"><a href="#修改图片的根目录" class="headerlink" title="修改图片的根目录"></a>修改图片的根目录</h3><h4 id="进入博客目录下的scaffolds文件夹中，修改post-md如下："><a href="#进入博客目录下的scaffolds文件夹中，修改post-md如下：" class="headerlink" title="进入博客目录下的scaffolds文件夹中，修改post.md如下："></a>进入博客目录下的scaffolds文件夹中，修改post.md如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 如何在hexo中添加图片（typora）</span><br><span class="line">permalink: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags: </span><br><span class="line">categories: </span><br><span class="line">typora-root-url: ../../../../source # 加入这一行</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="在博文中插入截图的图片："><a href="#在博文中插入截图的图片：" class="headerlink" title="在博文中插入截图的图片："></a>在博文中插入截图的图片：</h3><p><img src="/images/如何在hexo中添加图片（typora）/image-20190929203119727.png" alt="image-20190929203119727"></p><h4 id="在博文中插入本机图片（无论该文件在哪里，都会自动加入source-images-对应博文名称的文件夹下）："><a href="#在博文中插入本机图片（无论该文件在哪里，都会自动加入source-images-对应博文名称的文件夹下）：" class="headerlink" title="在博文中插入本机图片（无论该文件在哪里，都会自动加入source/images/对应博文名称的文件夹下）："></a>在博文中插入本机图片（无论该文件在哪里，都会自动加入source/images/对应博文名称的文件夹下）：</h4><p><img src="/images/如何在hexo中添加图片（typora）/image-20190929203549657.png" alt="image-20190929203549657"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;相关设置&quot;&gt;&lt;a href=&quot;#相关设置&quot; class=&quot;headerlink&quot; title=&quot;相关设置&quot;&gt;&lt;/a&gt;相关设置&lt;/h3&gt;&lt;h4 id=&quot;在Mac下进入Typora的Preferences中&quot;&gt;&lt;a href=&quot;#在Mac下进入Typora的Prefe
      
    
    </summary>
    
      <category term="Solutions" scheme="http://yoursite.com/categories/Solutions/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>mac终端iTerm2如何进行单词跳跃</title>
    <link href="http://yoursite.com/2019/09/29/mac%E7%BB%88%E7%AB%AFiTerm2%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%8D%95%E8%AF%8D%E8%B7%B3%E8%B7%83/"/>
    <id>http://yoursite.com/2019/09/29/mac终端iTerm2如何进行单词跳跃/</id>
    <published>2019-09-29T03:35:10.000Z</published>
    <updated>2019-10-13T00:40:34.998Z</updated>
    
    <content type="html"><![CDATA[<h3 id="快捷键修改"><a href="#快捷键修改" class="headerlink" title="快捷键修改"></a>快捷键修改</h3><h4 id="进入Preferences设置中"><a href="#进入Preferences设置中" class="headerlink" title="进入Preferences设置中"></a>进入Preferences设置中</h4><p><img src="/images/mac终端iTerm2如何进行单词跳跃/image-20190929114909864.png" alt="image-20190929114909864" style="zoom:50%;"></p><h4 id="进入Profiles下的keys标签页"><a href="#进入Profiles下的keys标签页" class="headerlink" title="进入Profiles下的keys标签页"></a>进入Profiles下的keys标签页</h4><p><img src="/images/mac终端iTerm2如何进行单词跳跃/image-20190929115019592.png" alt="image-20190929115019592" style="zoom:50%;"></p><h4 id="找到option-←和option-→两个快捷键（这里是已经修改后的）"><a href="#找到option-←和option-→两个快捷键（这里是已经修改后的）" class="headerlink" title="找到option+←和option+→两个快捷键（这里是已经修改后的）"></a>找到option+←和option+→两个快捷键（这里是已经修改后的）</h4><p><img src="/images/mac终端iTerm2如何进行单词跳跃/image-20190929115412311.png" alt="image-20190929115412311" style="zoom:50%;"></p><h4 id="进行如下修改"><a href="#进行如下修改" class="headerlink" title="进行如下修改"></a>进行如下修改</h4><p><img src="/images/mac终端iTerm2如何进行单词跳跃/image-20190929115633472.png" alt="image-20190929115633472" style="zoom: 50%;"></p><p><img src="/images/mac终端iTerm2如何进行单词跳跃/image-20190929115653901.png" alt="image-20190929115653901" style="zoom:50%;"></p><h3 id="iTerm2下的一些快捷键"><a href="#iTerm2下的一些快捷键" class="headerlink" title="iTerm2下的一些快捷键"></a>iTerm2下的一些快捷键</h3><h4 id="光标移动至行首：-ctrl-a"><a href="#光标移动至行首：-ctrl-a" class="headerlink" title="光标移动至行首： ctrl + a"></a>光标移动至行首： ctrl + a</h4><h4 id="光标移动至行位：ctrl-e"><a href="#光标移动至行位：ctrl-e" class="headerlink" title="光标移动至行位：ctrl + e"></a>光标移动至行位：ctrl + e</h4><h4 id="删除当前行：ctrl-u"><a href="#删除当前行：ctrl-u" class="headerlink" title="删除当前行：ctrl  + u"></a>删除当前行：ctrl  + u</h4><h4 id="当前位置开始清除至行尾：ctrl-k"><a href="#当前位置开始清除至行尾：ctrl-k" class="headerlink" title="当前位置开始清除至行尾：ctrl + k"></a>当前位置开始清除至行尾：ctrl + k</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;快捷键修改&quot;&gt;&lt;a href=&quot;#快捷键修改&quot; class=&quot;headerlink&quot; title=&quot;快捷键修改&quot;&gt;&lt;/a&gt;快捷键修改&lt;/h3&gt;&lt;h4 id=&quot;进入Preferences设置中&quot;&gt;&lt;a href=&quot;#进入Preferences设置中&quot; class=&quot;
      
    
    </summary>
    
      <category term="Solutions" scheme="http://yoursite.com/categories/Solutions/"/>
    
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
      <category term="Terminal" scheme="http://yoursite.com/tags/Terminal/"/>
    
  </entry>
  
  <entry>
    <title>如何对hexo中的文章进行分类管理</title>
    <link href="http://yoursite.com/2019/09/29/%E5%A6%82%E4%BD%95%E5%AF%B9hexo%E4%B8%AD%E7%9A%84%E6%96%87%E7%AB%A0%E8%BF%9B%E8%A1%8C%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2019/09/29/如何对hexo中的文章进行分类管理/</id>
    <published>2019-09-29T02:47:08.000Z</published>
    <updated>2019-09-30T14:16:38.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在博客主目录下找到-config-yml文件，修改其中的new-post-name和permalink字段"><a href="#在博客主目录下找到-config-yml文件，修改其中的new-post-name和permalink字段" class="headerlink" title="在博客主目录下找到_config.yml文件，修改其中的new_post_name和permalink字段"></a>在博客主目录下找到_config.yml文件，修改其中的new_post_name和permalink字段</h3><h4 id="将new-post-name修改成如下格式："><a href="#将new-post-name修改成如下格式：" class="headerlink" title="将new_post_name修改成如下格式："></a>将new_post_name修改成如下格式：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :year/:month/:day/:title.md</span><br></pre></td></tr></table></figure><p><em>如果觉得没必要精确到日的话，可以删除”:day/“</em></p><h4 id="将permalink修改成如下格式："><a href="#将permalink修改成如下格式：" class="headerlink" title="将permalink修改成如下格式："></a>将permalink修改成如下格式：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :year/:month/:day/:title/</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="permalink中的title不是文章的题目，而是相对于source-post-的相对路径"><a href="#permalink中的title不是文章的题目，而是相对于source-post-的相对路径" class="headerlink" title="permalink中的title不是文章的题目，而是相对于source/_post/的相对路径"></a>permalink中的title不是文章的题目，而是相对于source/_post/的相对路径</h4><h4 id="因此需要在博客主目录下的scaffolds文件夹中修改post-md："><a href="#因此需要在博客主目录下的scaffolds文件夹中修改post-md：" class="headerlink" title="因此需要在博客主目录下的scaffolds文件夹中修改post.md："></a>因此需要在博客主目录下的scaffolds文件夹中修改post.md：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">permalink: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/maosidiaoxian/article/details/85220394" target="_blank" rel="noopener">https://blog.csdn.net/maosidiaoxian/article/details/85220394</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在博客主目录下找到-config-yml文件，修改其中的new-post-name和permalink字段&quot;&gt;&lt;a href=&quot;#在博客主目录下找到-config-yml文件，修改其中的new-post-name和permalink字段&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="Solutions" scheme="http://yoursite.com/categories/Solutions/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>如何给hexo博客添加标签</title>
    <link href="http://yoursite.com/2019/09/29/%E5%A6%82%E4%BD%95%E7%BB%99hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2019/09/29/如何给hexo博客添加标签/</id>
    <published>2019-09-29T00:46:48.000Z</published>
    <updated>2019-09-30T14:16:40.110Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在source文件夹中执行："><a href="#在source文件夹中执行：" class="headerlink" title="在source文件夹中执行："></a>在source文件夹中执行：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p><em>这里的tags是标签页面的名字，也可以写中文的“标签”。</em></p><h3 id="在新生成的tags文件夹中打开index-md，添加如下字段："><a href="#在新生成的tags文件夹中打开index-md，添加如下字段：" class="headerlink" title="在新生成的tags文件夹中打开index.md，添加如下字段："></a>在新生成的tags文件夹中打开index.md，添加如下字段：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure><p><em>注意：冒号后有一个空格</em></p><h4 id="如果需要删除tags页的评论，添加如下字段："><a href="#如果需要删除tags页的评论，添加如下字段：" class="headerlink" title="如果需要删除tags页的评论，添加如下字段："></a>如果需要删除tags页的评论，添加如下字段：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">comments: false</span><br></pre></td></tr></table></figure><h3 id="进入博客主目录下的themes文件夹，再进入所使用的的主题文件夹下，打开-config-yml文件，找到menu字段，添加tags字段："><a href="#进入博客主目录下的themes文件夹，再进入所使用的的主题文件夹下，打开-config-yml文件，找到menu字段，添加tags字段：" class="headerlink" title="进入博客主目录下的themes文件夹，再进入所使用的的主题文件夹下，打开_config.yml文件，找到menu字段，添加tags字段："></a>进入博客主目录下的themes文件夹，再进入所使用的的主题文件夹下，打开_config.yml文件，找到menu字段，添加tags字段：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">home: /</span><br><span class="line">archives: /archives/</span><br><span class="line">tags: /tags/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在source文件夹中执行：&quot;&gt;&lt;a href=&quot;#在source文件夹中执行：&quot; class=&quot;headerlink&quot; title=&quot;在source文件夹中执行：&quot;&gt;&lt;/a&gt;在source文件夹中执行：&lt;/h3&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="Solutions" scheme="http://yoursite.com/categories/Solutions/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>如何将hexo博客从Ubuntu下迁移至Mac</title>
    <link href="http://yoursite.com/2019/09/28/%E5%A6%82%E4%BD%95%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E4%BB%8EUbuntu%E4%B8%8B%E8%BF%81%E7%A7%BB%E8%87%B3Mac/"/>
    <id>http://yoursite.com/2019/09/28/如何将hexo博客从Ubuntu下迁移至Mac/</id>
    <published>2019-09-28T14:22:35.000Z</published>
    <updated>2019-10-13T00:40:23.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="迁移过程"><a href="#迁移过程" class="headerlink" title="迁移过程"></a>迁移过程</h2><h3 id="在Mac下安装git并添加公钥"><a href="#在Mac下安装git并添加公钥" class="headerlink" title="在Mac下安装git并添加公钥"></a>在Mac下安装git并添加公钥</h3><h4 id="具体内容可以百度搜索，不过多赘述。"><a href="#具体内容可以百度搜索，不过多赘述。" class="headerlink" title="具体内容可以百度搜索，不过多赘述。"></a>具体内容可以百度搜索，不过多赘述。</h4><h3 id="下载Node-js"><a href="#下载Node-js" class="headerlink" title="下载Node.js"></a>下载Node.js</h3><h3 id="此处下载"><a href="#此处下载" class="headerlink" title="此处下载"></a><a href="https://nodejs.org/en/" target="_blank" rel="noopener">此处下载</a></h3><h3 id="拷贝原来的文件到新电脑中"><a href="#拷贝原来的文件到新电脑中" class="headerlink" title="拷贝原来的文件到新电脑中"></a>拷贝原来的文件到新电脑中</h3><h4 id="必须拷贝的文件有：-config-yml，theme-，source-，scaffolds-，package-json，-gitignore"><a href="#必须拷贝的文件有：-config-yml，theme-，source-，scaffolds-，package-json，-gitignore" class="headerlink" title="必须拷贝的文件有：_config.yml，theme/，source/，scaffolds/，package.json，.gitignore"></a>必须拷贝的文件有：_config.yml，theme/，source/，scaffolds/，package.json，.gitignore</h4><h4 id="不需要拷贝的文件有：-git-，node-modules-，public-，-deploy-git-，db-json"><a href="#不需要拷贝的文件有：-git-，node-modules-，public-，-deploy-git-，db-json" class="headerlink" title="不需要拷贝的文件有：.git/，node_modules/，public/，.deploy_git/，db.json"></a>不需要拷贝的文件有：.git/，node_modules/，public/，.deploy_git/，db.json</h4><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><h4 id="在安装过程中，由于npm的镜像在国外，所以遇到了一些错误，后来改用淘宝的cnpm才得以解决，以下是方法："><a href="#在安装过程中，由于npm的镜像在国外，所以遇到了一些错误，后来改用淘宝的cnpm才得以解决，以下是方法：" class="headerlink" title="在安装过程中，由于npm的镜像在国外，所以遇到了一些错误，后来改用淘宝的cnpm才得以解决，以下是方法："></a>在安装过程中，由于npm的镜像在国外，所以遇到了一些错误，后来改用淘宝的cnpm才得以解决，以下是方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="使用cnpm-install命令进行模块安装"><a href="#使用cnpm-install命令进行模块安装" class="headerlink" title="使用cnpm install命令进行模块安装"></a>使用cnpm install命令进行模块安装</h3><h4 id="注意不要使用hexo-init"><a href="#注意不要使用hexo-init" class="headerlink" title="注意不要使用hexo init"></a>注意不要使用hexo init</h4><h3 id="安装deployer"><a href="#安装deployer" class="headerlink" title="安装deployer"></a>安装deployer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install hexo-generator-git --save</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="插件重复安装"><a href="#插件重复安装" class="headerlink" title="插件重复安装"></a>插件重复安装</h3><h4 id="在node-modules文件夹河package-json文件夹中删除相应的插件"><a href="#在node-modules文件夹河package-json文件夹中删除相应的插件" class="headerlink" title="在node_modules文件夹河package,json文件夹中删除相应的插件"></a>在node_modules文件夹河package,json文件夹中删除相应的插件</h4><h3 id="hexo-clean使用出错"><a href="#hexo-clean使用出错" class="headerlink" title="hexo clean使用出错"></a>hexo clean使用出错</h3><h4 id="把public中需要编译的内容（比如CNAME文件）移到source文件夹中，然后进行hexo-clean。当执行hexo-g的时候会重新创建pulic文件夹，复原其中的文件。"><a href="#把public中需要编译的内容（比如CNAME文件）移到source文件夹中，然后进行hexo-clean。当执行hexo-g的时候会重新创建pulic文件夹，复原其中的文件。" class="headerlink" title="把public中需要编译的内容（比如CNAME文件）移到source文件夹中，然后进行hexo clean。当执行hexo g的时候会重新创建pulic文件夹，复原其中的文件。"></a>把public中需要编译的内容（比如CNAME文件）移到source文件夹中，然后进行hexo clean。当执行hexo g的时候会重新创建pulic文件夹，复原其中的文件。</h4><h3 id="无法部署新的文章到github上"><a href="#无法部署新的文章到github上" class="headerlink" title="无法部署新的文章到github上"></a>无法部署新的文章到github上</h3><h4 id="因为我使用了原来文件中的node-modules，可以删除它再cnmp-install"><a href="#因为我使用了原来文件中的node-modules，可以删除它再cnmp-install" class="headerlink" title="因为我使用了原来文件中的node_modules，可以删除它再cnmp install"></a>因为我使用了原来文件中的node_modules，可以删除它再cnmp install</h4><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>1.<a href="https://www.zhihu.com/question/21193762/answer/103097754" target="_blank" rel="noopener">https://www.zhihu.com/question/21193762/answer/103097754</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;迁移过程&quot;&gt;&lt;a href=&quot;#迁移过程&quot; class=&quot;headerlink&quot; title=&quot;迁移过程&quot;&gt;&lt;/a&gt;迁移过程&lt;/h2&gt;&lt;h3 id=&quot;在Mac下安装git并添加公钥&quot;&gt;&lt;a href=&quot;#在Mac下安装git并添加公钥&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Solutions" scheme="http://yoursite.com/categories/Solutions/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>如何从零搭建unet网络</title>
    <link href="http://yoursite.com/2019/07/09/%E5%A6%82%E4%BD%95%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAunet%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2019/07/09/如何从零搭建unet网络/</id>
    <published>2019-07-09T13:15:18.000Z</published>
    <updated>2019-09-29T03:22:12.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''数据增强'''</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms.functional <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">mask_path = <span class="string">'./data/old_mask/'</span></span><br><span class="line">image_path = <span class="string">'./data/old_images/'</span></span><br><span class="line">mask_save_path = <span class="string">'./data/mask/'</span></span><br><span class="line">image_save_path = <span class="string">'./data/images/'</span></span><br><span class="line">num = <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RandomFilp</span><span class="params">(image, mask)</span>:</span></span><br><span class="line">    <span class="string">'''随机翻转'''</span></span><br><span class="line">    <span class="keyword">if</span> random.random() &gt; <span class="number">0.5</span>:</span><br><span class="line">        image = tf.hflip(image)</span><br><span class="line">        mask = tf.hflip(mask)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        image = tf.vflip(image)</span><br><span class="line">        mask = tf.vflip(mask)</span><br><span class="line">    <span class="keyword">return</span> image, mask</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RandomRotation</span><span class="params">(image, mask)</span>:</span></span><br><span class="line">    <span class="string">'''随机旋转'''</span></span><br><span class="line">    angle = transforms.RandomRotation.get_params([<span class="number">-180</span>, <span class="number">180</span>])</span><br><span class="line">    image = tf.rotate(image, angle, resample=Image.NEAREST)</span><br><span class="line">    mask = tf.rotate(mask, angle, resample=Image.NEAREST)</span><br><span class="line">    <span class="keyword">return</span> image, mask</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RandomCrop</span><span class="params">(image, mask)</span>:</span></span><br><span class="line">    <span class="string">'''随机裁剪'''</span></span><br><span class="line">    <span class="keyword">if</span> random.random() &gt; <span class="number">0.5</span>:</span><br><span class="line">        i, j, h, w  = transforms.RandomResizedCrop.get_params(</span><br><span class="line">                    image, scale=(<span class="number">0.5</span>, <span class="number">1.0</span>), ratio = (<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">        image = tf.resized_crop(image, i, j, h, w, (<span class="number">396</span>, <span class="number">476</span>))</span><br><span class="line">        mask  = tf.resized_crop(mask, i, j, h, w, (<span class="number">396</span>, <span class="number">476</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pad = random.randint(<span class="number">0</span>, <span class="number">192</span>)</span><br><span class="line">        image = tf.pad(image, pad)</span><br><span class="line">        image = tf.resize(image, (<span class="number">396</span>, <span class="number">476</span>))</span><br><span class="line">        mask = tf.pad(mask, pad)</span><br><span class="line">        mask = tf.resize(mask, (<span class="number">396</span>, <span class="number">476</span>))</span><br><span class="line">    <span class="keyword">return</span> image, mask</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(image, mask)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 旋转</span></span><br><span class="line">    <span class="comment"># angle是-180到180的随机数</span></span><br><span class="line">    angle = transforms.RandomRotation.get_params([<span class="number">-180</span>, <span class="number">180</span>])</span><br><span class="line">    image = tf.rotate(image, angle, resample=Image.NEAREST)</span><br><span class="line">    mask = tf.rotate(mask, angle, resample=Image.NEAREST)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机翻转</span></span><br><span class="line">    <span class="keyword">if</span> random.random() &gt; <span class="number">0.5</span>:</span><br><span class="line">        image, mask = RandomFilp(image, mask)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机裁剪</span></span><br><span class="line">    <span class="keyword">if</span> random.random() &gt; <span class="number">0.5</span>:</span><br><span class="line">        image, mask = RandomCrop(image, mask)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机旋转</span></span><br><span class="line">    <span class="keyword">if</span> random.random() &gt; <span class="number">0.5</span>:</span><br><span class="line">        image, mask = RandomRotation(image, mask)</span><br><span class="line">    <span class="keyword">return</span> image, mask</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Augmentation</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''数据增强'''</span></span><br><span class="line">    images_name = os.listdir(image_path)</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> image_name <span class="keyword">in</span> images_name:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">            image = Image.open(image_path + image_name)</span><br><span class="line">            mask = Image.open(mask_path + image_name)</span><br><span class="line">            new_image, new_mask = transform(image, mask)</span><br><span class="line">            new_image.save(image_save_path + str(j) + <span class="string">'.png'</span>)</span><br><span class="line">            new_mask.save(mask_save_path + str(j) + <span class="string">'.png'</span>)</span><br><span class="line">            j += <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    Augmentation()</span><br></pre></td></tr></table></figure><h2 id="Dataloader创建"><a href="#Dataloader创建" class="headerlink" title="Dataloader创建"></a>Dataloader创建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader, random_split</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> PIL.Image <span class="keyword">as</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img_path = <span class="string">'./data/images/'</span></span><br><span class="line">msk_path = <span class="string">'./data/mask/'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize([<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>], [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">target_transform = transforms.ToTensor()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpineData</span><span class="params">(Dataset)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, transform=None, target_transform=None)</span>:</span></span><br><span class="line">        self.transform = transform</span><br><span class="line">        self.target_transform = target_transform</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(os.listdir(img_path))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, idx)</span>:</span></span><br><span class="line">        image_name = os.listdir(img_path)[idx]</span><br><span class="line"></span><br><span class="line">        image = Image.open(img_path + image_name).convert(<span class="string">'RGB'</span>)</span><br><span class="line">        image = image.resize((<span class="number">256</span>, <span class="number">256</span>)) <span class="comment"># 统一大小可以加快训练速度</span></span><br><span class="line">        mask = Image.open(msk_path + image_name).convert(<span class="string">'L'</span>)</span><br><span class="line">        mask = mask.resize((<span class="number">256</span>, <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将image和mask都转为Tensor格式</span></span><br><span class="line">        <span class="keyword">if</span> self.target_transform:</span><br><span class="line">            mask = self.target_transform(mask)</span><br><span class="line">        <span class="keyword">if</span> self.transform:</span><br><span class="line">            image = self.transform(image)</span><br><span class="line">        <span class="keyword">return</span> image, mask</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spine_data = SpineData(transform, target_transform)</span><br><span class="line">train_size = int(<span class="number">0.9</span> * len(spine_data))</span><br><span class="line">test_sizee = len(spine_data) - train_size</span><br><span class="line">trainset, testset = random_split(spine_data, (train_size, test_sizee))</span><br><span class="line">trainloader = DataLoader(trainset,</span><br><span class="line">                        batch_size=<span class="number">4</span>,</span><br><span class="line">                        shuffle=<span class="literal">True</span>,</span><br><span class="line">                        num_workers=<span class="number">2</span>)</span><br><span class="line">testloader = DataLoader(testset)</span><br><span class="line"></span><br><span class="line">dataiter = iter(trainloader)</span><br><span class="line">img, msk = dataiter.next()</span><br></pre></td></tr></table></figure><h2 id="Unet网络搭建"><a href="#Unet网络搭建" class="headerlink" title="Unet网络搭建"></a>Unet网络搭建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleConv</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,in_ch,out_ch)</span>:</span></span><br><span class="line">        super(DoubleConv,self).__init__()</span><br><span class="line">        self.conv = nn.Sequential(</span><br><span class="line">                nn.Conv2d(in_ch,out_ch,<span class="number">3</span>,padding=<span class="number">1</span>),<span class="comment"># in_ch、out_ch是通道数</span></span><br><span class="line">                nn.BatchNorm2d(out_ch),</span><br><span class="line">                nn.ReLU(inplace = <span class="literal">True</span>),</span><br><span class="line">                nn.Conv2d(out_ch,out_ch,<span class="number">3</span>,padding=<span class="number">1</span>),</span><br><span class="line">                nn.BatchNorm2d(out_ch),</span><br><span class="line">                nn.ReLU(inplace = <span class="literal">True</span>)</span><br><span class="line">            )</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.conv(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UNet</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_ch, out_ch)</span>:</span></span><br><span class="line">        super(UNet, self).__init__()</span><br><span class="line">        super(UNet,self).__init__()</span><br><span class="line">        self.conv1 = DoubleConv(in_ch,<span class="number">64</span>)</span><br><span class="line">        self.pool1 = nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        self.conv2 = DoubleConv(<span class="number">64</span>,<span class="number">128</span>)</span><br><span class="line">        self.pool2 = nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        self.conv3 = DoubleConv(<span class="number">128</span>,<span class="number">256</span>)</span><br><span class="line">        self.pool3 = nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        self.conv4 = DoubleConv(<span class="number">256</span>,<span class="number">512</span>)</span><br><span class="line">        self.pool4 = nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        self.conv5 = DoubleConv(<span class="number">512</span>,<span class="number">1024</span>)</span><br><span class="line">        <span class="comment">#逆卷积</span></span><br><span class="line">        self.up6 = nn.ConvTranspose2d(<span class="number">1024</span>,<span class="number">512</span>,<span class="number">2</span>,stride=<span class="number">2</span>)</span><br><span class="line">        self.conv6 = DoubleConv(<span class="number">1024</span>,<span class="number">512</span>)</span><br><span class="line">        self.up7 = nn.ConvTranspose2d(<span class="number">512</span>,<span class="number">256</span>,<span class="number">2</span>,stride=<span class="number">2</span>)</span><br><span class="line">        self.conv7 = DoubleConv(<span class="number">512</span>,<span class="number">256</span>)</span><br><span class="line">        self.up8 = nn.ConvTranspose2d(<span class="number">256</span>,<span class="number">128</span>,<span class="number">2</span>,stride=<span class="number">2</span>)</span><br><span class="line">        self.conv8 = DoubleConv(<span class="number">256</span>,<span class="number">128</span>)</span><br><span class="line">        self.up9 = nn.ConvTranspose2d(<span class="number">128</span>,<span class="number">64</span>,<span class="number">2</span>,stride=<span class="number">2</span>)</span><br><span class="line">        self.conv9 = DoubleConv(<span class="number">128</span>,<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">        self.conv10 = nn.Conv2d(<span class="number">64</span>,out_ch,<span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        c1 = self.conv1(x)</span><br><span class="line">        p1 = self.pool1(c1)</span><br><span class="line">        c2 = self.conv2(p1)</span><br><span class="line">        p2 = self.pool2(c2)</span><br><span class="line">        c3 = self.conv3(p2)</span><br><span class="line">        p3 = self.pool3(c3)</span><br><span class="line">        c4 = self.conv4(p3)</span><br><span class="line">        p4 = self.pool4(c4)</span><br><span class="line">        c5 = self.conv5(p4)</span><br><span class="line">        up_6 = self.up6(c5)</span><br><span class="line">        merge6 = torch.cat([up_6,c4],dim=<span class="number">1</span>)<span class="comment"># 按列拼接</span></span><br><span class="line">        c6 = self.conv6(merge6)</span><br><span class="line">        up_7 = self.up7(c6)</span><br><span class="line">        merge7 = torch.cat([up_7,c3],dim=<span class="number">1</span>)</span><br><span class="line">        c7 = self.conv7(merge7)</span><br><span class="line">        up_8 = self.up8(c7)</span><br><span class="line">        merge8 = torch.cat([up_8,c2],dim=<span class="number">1</span>)</span><br><span class="line">        c8 = self.conv8(merge8)</span><br><span class="line">        up_9 = self.up9(c8)</span><br><span class="line">        merge9 = torch.cat([up_9,c1],dim=<span class="number">1</span>)</span><br><span class="line">        c9 = self.conv9(merge9)</span><br><span class="line">        c10 = self.conv10(c9)</span><br><span class="line"></span><br><span class="line">        out = nn.Sigmoid()(c10)<span class="comment"># 化成(0~1)区间</span></span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><h2 id="网络训练与测试"><a href="#网络训练与测试" class="headerlink" title="网络训练与测试"></a>网络训练与测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> data_loader <span class="keyword">import</span> trainloader, testloader</span><br><span class="line"><span class="keyword">from</span> unet <span class="keyword">import</span> UNet</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">"cuda:0"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br><span class="line">model = UNet(<span class="number">3</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span><span class="params">(model, criterion, optimizer, num_epochs=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epochs):</span><br><span class="line">        print(<span class="string">'Epoch &#123;&#125;/&#123;&#125;'</span>.format(epoch, num_epochs - <span class="number">1</span>))</span><br><span class="line">        print(<span class="string">'-'</span> * <span class="number">10</span>)</span><br><span class="line">        dataset_size = len(trainloader.dataset)</span><br><span class="line">        epoch_loss = <span class="number">0</span></span><br><span class="line">        step = <span class="number">0</span> <span class="comment">#minibatch数</span></span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> trainloader:<span class="comment"># 分100次遍历数据集，每次遍历batch_size=4</span></span><br><span class="line">            optimizer.zero_grad()<span class="comment">#每次minibatch都要将梯度(dw,db,...)清零</span></span><br><span class="line">            inputs = x</span><br><span class="line">            labels = y</span><br><span class="line">            outputs = model(inputs)<span class="comment">#前向传播</span></span><br><span class="line">            loss = criterion(outputs, labels)<span class="comment">#计算损失</span></span><br><span class="line">            loss.backward()<span class="comment">#梯度下降,计算出梯度</span></span><br><span class="line">            optimizer.step()<span class="comment">#更新参数一次：所有的优化器Optimizer都实现了step()方法来对所有的参数进行更新</span></span><br><span class="line">            epoch_loss += loss.item()</span><br><span class="line">            step += <span class="number">1</span></span><br><span class="line">            print(<span class="string">"%d/%d,train_loss:%0.3f"</span> % (step, dataset_size // trainloader.batch_size, loss.item()))</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"epoch %d loss:%0.3f"</span> % (epoch, epoch_loss))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">()</span>:</span></span><br><span class="line">    criterion = nn.BCELoss()</span><br><span class="line">    optimizer = optim.Adam(model.parameters())</span><br><span class="line">    train_model(model, criterion, optimizer)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> idx, (x, _) <span class="keyword">in</span> enumerate(testloader):</span><br><span class="line">            y = model(x)</span><br><span class="line">            print(<span class="string">"y:"</span>)</span><br><span class="line">            print(y)</span><br><span class="line">            print(y.shape)</span><br><span class="line">            img_y = torch.squeeze(y).numpy() <span class="comment"># 去掉batch_size和channel,这两者均为1</span></span><br><span class="line">            print(<span class="string">"img_y:"</span>)</span><br><span class="line">            print(img_y)</span><br><span class="line">            plt.imshow(img_y)</span><br><span class="line">            print(img_y.shape)</span><br><span class="line">            plt.axis(<span class="string">'off'</span>)</span><br><span class="line">            plt.subplots_adjust(top = <span class="number">1</span>, bottom = <span class="number">0</span>, right = <span class="number">1</span>, left = <span class="number">0</span>, hspace = <span class="number">0</span>, wspace = <span class="number">0</span>)</span><br><span class="line">            plt.margins(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            print(<span class="string">"./result/result&#123;&#125;.jpg"</span>.format(idx))</span><br><span class="line">            plt.savefig(<span class="string">"./result/result&#123;&#125;.jpg"</span>.format(idx), dpi=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train()</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据增强&quot;&gt;&lt;a href=&quot;#数据增强&quot; class=&quot;headerlink&quot; title=&quot;数据增强&quot;&gt;&lt;/a&gt;数据增强&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
      <category term="DeepLearning" scheme="http://yoursite.com/categories/DeepLearning/"/>
    
    
      <category term="Architecture" scheme="http://yoursite.com/tags/Architecture/"/>
    
      <category term="Unet" scheme="http://yoursite.com/tags/Unet/"/>
    
  </entry>
  
</feed>
