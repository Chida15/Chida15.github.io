<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yevette&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-09T14:15:38.864Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yevette</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何从零搭建unet网络</title>
    <link href="http://yoursite.com/2019/07/09/%E5%A6%82%E4%BD%95%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAunet%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2019/07/09/如何从零搭建unet网络/</id>
    <published>2019-07-09T13:15:18.000Z</published>
    <updated>2019-07-09T14:15:38.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''数据增强'''</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms.functional <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">mask_path = <span class="string">'./data/old_mask/'</span></span><br><span class="line">image_path = <span class="string">'./data/old_images/'</span></span><br><span class="line">mask_save_path = <span class="string">'./data/mask/'</span></span><br><span class="line">image_save_path = <span class="string">'./data/images/'</span></span><br><span class="line">num = <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RandomFilp</span><span class="params">(image, mask)</span>:</span></span><br><span class="line">    <span class="string">'''随机翻转'''</span></span><br><span class="line">    <span class="keyword">if</span> random.random() &gt; <span class="number">0.5</span>:</span><br><span class="line">        image = tf.hflip(image)</span><br><span class="line">        mask = tf.hflip(mask)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        image = tf.vflip(image)</span><br><span class="line">        mask = tf.vflip(mask)</span><br><span class="line">    <span class="keyword">return</span> image, mask</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RandomRotation</span><span class="params">(image, mask)</span>:</span></span><br><span class="line">    <span class="string">'''随机旋转'''</span></span><br><span class="line">    angle = transforms.RandomRotation.get_params([<span class="number">-180</span>, <span class="number">180</span>])</span><br><span class="line">    image = tf.rotate(image, angle, resample=Image.NEAREST)</span><br><span class="line">    mask = tf.rotate(mask, angle, resample=Image.NEAREST)</span><br><span class="line">    <span class="keyword">return</span> image, mask</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RandomCrop</span><span class="params">(image, mask)</span>:</span></span><br><span class="line">    <span class="string">'''随机裁剪'''</span></span><br><span class="line">    <span class="keyword">if</span> random.random() &gt; <span class="number">0.5</span>:</span><br><span class="line">        i, j, h, w  = transforms.RandomResizedCrop.get_params(</span><br><span class="line">                    image, scale=(<span class="number">0.5</span>, <span class="number">1.0</span>), ratio = (<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">        image = tf.resized_crop(image, i, j, h, w, (<span class="number">396</span>, <span class="number">476</span>))</span><br><span class="line">        mask  = tf.resized_crop(mask, i, j, h, w, (<span class="number">396</span>, <span class="number">476</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pad = random.randint(<span class="number">0</span>, <span class="number">192</span>)</span><br><span class="line">        image = tf.pad(image, pad)</span><br><span class="line">        image = tf.resize(image, (<span class="number">396</span>, <span class="number">476</span>))</span><br><span class="line">        mask = tf.pad(mask, pad)</span><br><span class="line">        mask = tf.resize(mask, (<span class="number">396</span>, <span class="number">476</span>))</span><br><span class="line">    <span class="keyword">return</span> image, mask</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(image, mask)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 旋转</span></span><br><span class="line">    <span class="comment"># angle是-180到180的随机数</span></span><br><span class="line">    angle = transforms.RandomRotation.get_params([<span class="number">-180</span>, <span class="number">180</span>])</span><br><span class="line">    image = tf.rotate(image, angle, resample=Image.NEAREST)</span><br><span class="line">    mask = tf.rotate(mask, angle, resample=Image.NEAREST)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机翻转</span></span><br><span class="line">    <span class="keyword">if</span> random.random() &gt; <span class="number">0.5</span>:</span><br><span class="line">        image, mask = RandomFilp(image, mask)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机裁剪</span></span><br><span class="line">    <span class="keyword">if</span> random.random() &gt; <span class="number">0.5</span>:</span><br><span class="line">        image, mask = RandomCrop(image, mask)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机旋转</span></span><br><span class="line">    <span class="keyword">if</span> random.random() &gt; <span class="number">0.5</span>:</span><br><span class="line">        image, mask = RandomRotation(image, mask)</span><br><span class="line">    <span class="keyword">return</span> image, mask</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Augmentation</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''数据增强'''</span></span><br><span class="line">    images_name = os.listdir(image_path)</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> image_name <span class="keyword">in</span> images_name:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">            image = Image.open(image_path + image_name)</span><br><span class="line">            mask = Image.open(mask_path + image_name)</span><br><span class="line">            new_image, new_mask = transform(image, mask)</span><br><span class="line">            new_image.save(image_save_path + str(j) + <span class="string">'.png'</span>)</span><br><span class="line">            new_mask.save(mask_save_path + str(j) + <span class="string">'.png'</span>)</span><br><span class="line">            j += <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    Augmentation()</span><br></pre></td></tr></table></figure><h2 id="Dataloader创建"><a href="#Dataloader创建" class="headerlink" title="Dataloader创建"></a>Dataloader创建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader, random_split</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> PIL.Image <span class="keyword">as</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img_path = <span class="string">'./data/images/'</span></span><br><span class="line">msk_path = <span class="string">'./data/mask/'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize([<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>], [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">target_transform = transforms.ToTensor()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpineData</span><span class="params">(Dataset)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, transform=None, target_transform=None)</span>:</span></span><br><span class="line">        self.transform = transform</span><br><span class="line">        self.target_transform = target_transform</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(os.listdir(img_path))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, idx)</span>:</span></span><br><span class="line">        image_name = os.listdir(img_path)[idx]</span><br><span class="line"></span><br><span class="line">        image = Image.open(img_path + image_name).convert(<span class="string">'RGB'</span>)</span><br><span class="line">        image = image.resize((<span class="number">256</span>, <span class="number">256</span>)) <span class="comment"># 统一大小可以加快训练速度</span></span><br><span class="line">        mask = Image.open(msk_path + image_name).convert(<span class="string">'L'</span>)</span><br><span class="line">        mask = mask.resize((<span class="number">256</span>, <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将image和mask都转为Tensor格式</span></span><br><span class="line">        <span class="keyword">if</span> self.target_transform:</span><br><span class="line">            mask = self.target_transform(mask)</span><br><span class="line">        <span class="keyword">if</span> self.transform:</span><br><span class="line">            image = self.transform(image)</span><br><span class="line">        <span class="keyword">return</span> image, mask</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spine_data = SpineData(transform, target_transform)</span><br><span class="line">train_size = int(<span class="number">0.9</span> * len(spine_data))</span><br><span class="line">test_sizee = len(spine_data) - train_size</span><br><span class="line">trainset, testset = random_split(spine_data, (train_size, test_sizee))</span><br><span class="line">trainloader = DataLoader(trainset,</span><br><span class="line">                        batch_size=<span class="number">4</span>,</span><br><span class="line">                        shuffle=<span class="literal">True</span>,</span><br><span class="line">                        num_workers=<span class="number">2</span>)</span><br><span class="line">testloader = DataLoader(testset)</span><br><span class="line"></span><br><span class="line">dataiter = iter(trainloader)</span><br><span class="line">img, msk = dataiter.next()</span><br></pre></td></tr></table></figure><h2 id="Unet网络搭建"><a href="#Unet网络搭建" class="headerlink" title="Unet网络搭建"></a>Unet网络搭建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleConv</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,in_ch,out_ch)</span>:</span></span><br><span class="line">        super(DoubleConv,self).__init__()</span><br><span class="line">        self.conv = nn.Sequential(</span><br><span class="line">                nn.Conv2d(in_ch,out_ch,<span class="number">3</span>,padding=<span class="number">1</span>),<span class="comment"># in_ch、out_ch是通道数</span></span><br><span class="line">                nn.BatchNorm2d(out_ch),</span><br><span class="line">                nn.ReLU(inplace = <span class="literal">True</span>),</span><br><span class="line">                nn.Conv2d(out_ch,out_ch,<span class="number">3</span>,padding=<span class="number">1</span>),</span><br><span class="line">                nn.BatchNorm2d(out_ch),</span><br><span class="line">                nn.ReLU(inplace = <span class="literal">True</span>)</span><br><span class="line">            )</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.conv(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UNet</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_ch, out_ch)</span>:</span></span><br><span class="line">        super(UNet, self).__init__()</span><br><span class="line">        super(UNet,self).__init__()</span><br><span class="line">        self.conv1 = DoubleConv(in_ch,<span class="number">64</span>)</span><br><span class="line">        self.pool1 = nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        self.conv2 = DoubleConv(<span class="number">64</span>,<span class="number">128</span>)</span><br><span class="line">        self.pool2 = nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        self.conv3 = DoubleConv(<span class="number">128</span>,<span class="number">256</span>)</span><br><span class="line">        self.pool3 = nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        self.conv4 = DoubleConv(<span class="number">256</span>,<span class="number">512</span>)</span><br><span class="line">        self.pool4 = nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        self.conv5 = DoubleConv(<span class="number">512</span>,<span class="number">1024</span>)</span><br><span class="line">        <span class="comment">#逆卷积</span></span><br><span class="line">        self.up6 = nn.ConvTranspose2d(<span class="number">1024</span>,<span class="number">512</span>,<span class="number">2</span>,stride=<span class="number">2</span>)</span><br><span class="line">        self.conv6 = DoubleConv(<span class="number">1024</span>,<span class="number">512</span>)</span><br><span class="line">        self.up7 = nn.ConvTranspose2d(<span class="number">512</span>,<span class="number">256</span>,<span class="number">2</span>,stride=<span class="number">2</span>)</span><br><span class="line">        self.conv7 = DoubleConv(<span class="number">512</span>,<span class="number">256</span>)</span><br><span class="line">        self.up8 = nn.ConvTranspose2d(<span class="number">256</span>,<span class="number">128</span>,<span class="number">2</span>,stride=<span class="number">2</span>)</span><br><span class="line">        self.conv8 = DoubleConv(<span class="number">256</span>,<span class="number">128</span>)</span><br><span class="line">        self.up9 = nn.ConvTranspose2d(<span class="number">128</span>,<span class="number">64</span>,<span class="number">2</span>,stride=<span class="number">2</span>)</span><br><span class="line">        self.conv9 = DoubleConv(<span class="number">128</span>,<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">        self.conv10 = nn.Conv2d(<span class="number">64</span>,out_ch,<span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        c1 = self.conv1(x)</span><br><span class="line">        p1 = self.pool1(c1)</span><br><span class="line">        c2 = self.conv2(p1)</span><br><span class="line">        p2 = self.pool2(c2)</span><br><span class="line">        c3 = self.conv3(p2)</span><br><span class="line">        p3 = self.pool3(c3)</span><br><span class="line">        c4 = self.conv4(p3)</span><br><span class="line">        p4 = self.pool4(c4)</span><br><span class="line">        c5 = self.conv5(p4)</span><br><span class="line">        up_6 = self.up6(c5)</span><br><span class="line">        merge6 = torch.cat([up_6,c4],dim=<span class="number">1</span>)<span class="comment"># 按列拼接</span></span><br><span class="line">        c6 = self.conv6(merge6)</span><br><span class="line">        up_7 = self.up7(c6)</span><br><span class="line">        merge7 = torch.cat([up_7,c3],dim=<span class="number">1</span>)</span><br><span class="line">        c7 = self.conv7(merge7)</span><br><span class="line">        up_8 = self.up8(c7)</span><br><span class="line">        merge8 = torch.cat([up_8,c2],dim=<span class="number">1</span>)</span><br><span class="line">        c8 = self.conv8(merge8)</span><br><span class="line">        up_9 = self.up9(c8)</span><br><span class="line">        merge9 = torch.cat([up_9,c1],dim=<span class="number">1</span>)</span><br><span class="line">        c9 = self.conv9(merge9)</span><br><span class="line">        c10 = self.conv10(c9)</span><br><span class="line"></span><br><span class="line">        out = nn.Sigmoid()(c10)<span class="comment"># 化成(0~1)区间</span></span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><h2 id="网络训练与测试"><a href="#网络训练与测试" class="headerlink" title="网络训练与测试"></a>网络训练与测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> data_loader <span class="keyword">import</span> trainloader, testloader</span><br><span class="line"><span class="keyword">from</span> unet <span class="keyword">import</span> UNet</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">"cuda:0"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br><span class="line">model = UNet(<span class="number">3</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span><span class="params">(model, criterion, optimizer, num_epochs=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epochs):</span><br><span class="line">        print(<span class="string">'Epoch &#123;&#125;/&#123;&#125;'</span>.format(epoch, num_epochs - <span class="number">1</span>))</span><br><span class="line">        print(<span class="string">'-'</span> * <span class="number">10</span>)</span><br><span class="line">        dataset_size = len(trainloader.dataset)</span><br><span class="line">        epoch_loss = <span class="number">0</span></span><br><span class="line">        step = <span class="number">0</span> <span class="comment">#minibatch数</span></span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> trainloader:<span class="comment"># 分100次遍历数据集，每次遍历batch_size=4</span></span><br><span class="line">            optimizer.zero_grad()<span class="comment">#每次minibatch都要将梯度(dw,db,...)清零</span></span><br><span class="line">            inputs = x</span><br><span class="line">            labels = y</span><br><span class="line">            outputs = model(inputs)<span class="comment">#前向传播</span></span><br><span class="line">            loss = criterion(outputs, labels)<span class="comment">#计算损失</span></span><br><span class="line">            loss.backward()<span class="comment">#梯度下降,计算出梯度</span></span><br><span class="line">            optimizer.step()<span class="comment">#更新参数一次：所有的优化器Optimizer都实现了step()方法来对所有的参数进行更新</span></span><br><span class="line">            epoch_loss += loss.item()</span><br><span class="line">            step += <span class="number">1</span></span><br><span class="line">            print(<span class="string">"%d/%d,train_loss:%0.3f"</span> % (step, dataset_size // trainloader.batch_size, loss.item()))</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"epoch %d loss:%0.3f"</span> % (epoch, epoch_loss))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">()</span>:</span></span><br><span class="line">    criterion = nn.BCELoss()</span><br><span class="line">    optimizer = optim.Adam(model.parameters())</span><br><span class="line">    train_model(model, criterion, optimizer)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> idx, (x, _) <span class="keyword">in</span> enumerate(testloader):</span><br><span class="line">            y = model(x)</span><br><span class="line">            print(<span class="string">"y:"</span>)</span><br><span class="line">            print(y)</span><br><span class="line">            print(y.shape)</span><br><span class="line">            img_y = torch.squeeze(y).numpy() <span class="comment"># 去掉batch_size和channel,这两者均为1</span></span><br><span class="line">            print(<span class="string">"img_y:"</span>)</span><br><span class="line">            print(img_y)</span><br><span class="line">            plt.imshow(img_y)</span><br><span class="line">            print(img_y.shape)</span><br><span class="line">            plt.axis(<span class="string">'off'</span>)</span><br><span class="line">            plt.subplots_adjust(top = <span class="number">1</span>, bottom = <span class="number">0</span>, right = <span class="number">1</span>, left = <span class="number">0</span>, hspace = <span class="number">0</span>, wspace = <span class="number">0</span>)</span><br><span class="line">            plt.margins(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            print(<span class="string">"./result/result&#123;&#125;.jpg"</span>.format(idx))</span><br><span class="line">            plt.savefig(<span class="string">"./result/result&#123;&#125;.jpg"</span>.format(idx), dpi=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train()</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据增强&quot;&gt;&lt;a href=&quot;#数据增强&quot; class=&quot;headerlink&quot; title=&quot;数据增强&quot;&gt;&lt;/a&gt;数据增强&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PC端和ipad端如何同步PDF.md</title>
    <link href="http://yoursite.com/2019/04/21/PC%E7%AB%AF%E5%92%8Cipad%E7%AB%AF%E5%A6%82%E4%BD%95%E5%90%8C%E6%AD%A5PDF-md/"/>
    <id>http://yoursite.com/2019/04/21/PC端和ipad端如何同步PDF-md/</id>
    <published>2019-04-21T04:40:38.000Z</published>
    <updated>2019-04-21T04:52:56.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用坚果云和福昕阅读器进行PC端和ipad端的PDF同步"><a href="#使用坚果云和福昕阅读器进行PC端和ipad端的PDF同步" class="headerlink" title="使用坚果云和福昕阅读器进行PC端和ipad端的PDF同步"></a>使用坚果云和福昕阅读器进行PC端和ipad端的PDF同步</h1><h3 id="1-在PC端和ipad端同时下载福昕阅读器"><a href="#1-在PC端和ipad端同时下载福昕阅读器" class="headerlink" title="1. 在PC端和ipad端同时下载福昕阅读器"></a>1. 在PC端和ipad端同时下载福昕阅读器</h3><h3 id="2-PC端安装坚果云并注册坚果云账号"><a href="#2-PC端安装坚果云并注册坚果云账号" class="headerlink" title="2. PC端安装坚果云并注册坚果云账号"></a>2. PC端安装坚果云并注册坚果云账号</h3><p>账户信息——&gt;安全选项——&gt;添加应用<br>然后可以得到应用密码，在后面会用到</p><h3 id="3-点击create-sync-folder设置需要同步的文件夹"><a href="#3-点击create-sync-folder设置需要同步的文件夹" class="headerlink" title="3. 点击create sync folder设置需要同步的文件夹"></a>3. 点击create sync folder设置需要同步的文件夹</h3><h3 id="4-在ipad端进行设置"><a href="#4-在ipad端进行设置" class="headerlink" title="4. 在ipad端进行设置"></a>4. 在ipad端进行设置</h3><p>1.选择cloud点击add选择添加WebDAV<br>2.输入Title，URL(地址是<a href="https://dav.jianguoyun.com/dav/),Login(你注册坚果云时候的邮箱)，password（你的坚果云密码），然后save，就可以访问你在PC端设置的同步文件夹了" target="_blank" rel="noopener">https://dav.jianguoyun.com/dav/),Login(你注册坚果云时候的邮箱)，password（你的坚果云密码），然后save，就可以访问你在PC端设置的同步文件夹了</a><br></p><p>无论是在PC端还是在ipad端修改PDF后，双方都会立即更新同步信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用坚果云和福昕阅读器进行PC端和ipad端的PDF同步&quot;&gt;&lt;a href=&quot;#使用坚果云和福昕阅读器进行PC端和ipad端的PDF同步&quot; class=&quot;headerlink&quot; title=&quot;使用坚果云和福昕阅读器进行PC端和ipad端的PDF同步&quot;&gt;&lt;/a&gt;使用
      
    
    </summary>
    
      <category term="Skills" scheme="http://yoursite.com/categories/Skills/"/>
    
    
  </entry>
  
  <entry>
    <title>如何利用github pages打造自己的博客</title>
    <link href="http://yoursite.com/2019/04/15/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8github%20pages%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/04/15/如何利用github pages打造自己的博客/</id>
    <published>2019-04-14T16:00:32.000Z</published>
    <updated>2019-04-21T04:30:20.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打造自己的博客（github-pages-Hexo-NextT）"><a href="#打造自己的博客（github-pages-Hexo-NextT）" class="headerlink" title="打造自己的博客（github pages + Hexo + NextT）"></a>打造自己的博客（github pages + Hexo + NextT）</h1><h2 id="github创建仓库"><a href="#github创建仓库" class="headerlink" title="github创建仓库"></a>github创建仓库</h2><p>选择new repositories创建一个仓库，注意仓库的名字是用户名.github.io</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>1) 安装nodejsm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure></p><p>2) 安装git<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></p><p>3) 安装npm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure></p><p>4) npm换源(永久换成淘宝源)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><p>5) 安装hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>１）创建一个文件夹（作为博客根目录），比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir myBlog</span><br></pre></td></tr></table></figure></p><p>2)　初始化博客<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init myBlog</span><br></pre></td></tr></table></figure></p><p>3) 安装必要依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myBlog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>4)　关联github pages<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//在myBlog目录下执行</span><br><span class="line">gedit _config.ymｌ</span><br></pre></td></tr></table></figure></p><p>找到deploy,更换成如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><h2 id="换主题：NextT"><a href="#换主题：NextT" class="headerlink" title="换主题：NextT"></a>换主题：NextT</h2><p>1) 从github上clone NexT<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next //在myBLog目录下执行</span><br></pre></td></tr></table></figure></p><p>2) 更换主题<br>打开myBlog目录下的_config.yml，找到theme: landscape改为theme: next</p><p>3) 运行hexo s查看效果</p><h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><p>1) 申请阿里云域名<br>2) 域名解析<br>在域名界面点击解析，再点击添加记录，分别添加以下两项记录：<br><br>a)<br><br>记录类型：CNAME<br><br>主机记录：@<br><br>解析线路：默认<br><br>记录值：用户名.github.io<br><br>TTL：10分钟<br><br>b)<br><br>记录类型：CNAME<br><br>主机记录：www<br><br>解析线路：默认<br><br>记录值：用户名.github.io<br><br>TTL：10分钟<br></p><p><strong>最好使用CNAME，因为ip地址可能会改变。</strong></p><h2 id="美化nextT"><a href="#美化nextT" class="headerlink" title="美化nextT"></a>美化nextT</h2><p>参考博客：<br><br><a href="http://jeffyang.top/Hexo/Hexo%E4%B8%BB%E9%A2%98Next%E7%BE%8E%E5%8C%96/" target="_blank" rel="noopener">http://jeffyang.top/Hexo/Hexo%E4%B8%BB%E9%A2%98Next%E7%BE%8E%E5%8C%96/</a><br><br><a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">https://www.jianshu.com/p/f054333ac9e6</a><br><br><a href="http://www.yangyong.xyz/2018/01/03/add-hexo-next-post-views/" target="_blank" rel="noopener">http://www.yangyong.xyz/2018/01/03/add-hexo-next-post-views/</a> 阅读次数<br><a href="http://duansm.top/2018/08/03/hexo-next/" target="_blank" rel="noopener">http://duansm.top/2018/08/03/hexo-next/</a><br><a href="http://www.yamllint.com/" target="_blank" rel="noopener">http://www.yamllint.com/</a> 检测yaml是否有问题</p><h2 id="如何发表与删除文章"><a href="#如何发表与删除文章" class="headerlink" title="如何发表与删除文章"></a>如何发表与删除文章</h2><p>1) 新建文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new a // 生成post，新建并发布文章a，出现在source/_posts中</span><br><span class="line">hexo new draft b // 生成draft，新建草稿，出现在source/_drafts中</span><br><span class="line">hexo server --draft // 预览草稿</span><br><span class="line">hexo publish b // 发布草稿</span><br></pre></td></tr></table></figure></p><p><strong>默认hexo new是生成post，如果要改成其他的（比如draft），可以在myBlog下的_config.yml文件中找到default_layout进行修改，其参数值有：post，draft和page</strong></p><p>2）删除文章<br>进入source/_posts文件夹中，找到要删除的md文件，直接本地删除，然后依次执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;打造自己的博客（github-pages-Hexo-NextT）&quot;&gt;&lt;a href=&quot;#打造自己的博客（github-pages-Hexo-NextT）&quot; class=&quot;headerlink&quot; title=&quot;打造自己的博客（github pages + Hexo 
      
    
    </summary>
    
      <category term="Installation" scheme="http://yoursite.com/categories/Installation/"/>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
</feed>
